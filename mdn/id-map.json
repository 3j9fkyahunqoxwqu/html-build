{
  "2dcontext": [
    [
      "API/CanvasRenderingContext2D",
      "CanvasRenderingContext2D",
      "The CanvasRenderingContext2D interface is used for drawing rectangles, text, images and other objects onto the canvas element. It provides the 2D rendering context for the drawing surface of a <canvas> element."
    ],
    [
      "API/Canvas_API",
      "Canvas API",
      "Added in HTML5, the HTML <canvas> element can be used to draw graphics via scripting in JavaScript. For example, it can be used to draw graphs, make photo compositions, create animations, or even do real-time video processing or rendering."
    ]
  ],
  "abstractworker": [
    [
      "API/AbstractWorker",
      "AbstractWorker",
      "The AbstractWorker interface of the Web Workers API is an abstract interface that defines properties and methods that are common to all types of worker, including not only the basic Worker, but also ServiceWorker and SharedWorker."
    ]
  ],
  "animation-frames": [
    [
      "API/Window/requestAnimationFrame",
      "window.requestAnimationFrame()",
      "The window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. The method takes a callback as an argument to be invoked before the repaint."
    ]
  ],
  "attr-canvas-height": [
    [
      "API/HTMLCanvasElement/height",
      "HTMLCanvasElement.height",
      "The HTMLCanvasElement.height property is a positive integer reflecting the height HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used."
    ]
  ],
  "attr-canvas-width": [
    [
      "API/HTMLCanvasElement/width",
      "HTMLCanvasElement.width",
      "The HTMLCanvasElement.width property is a positive integer reflecting the width HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used."
    ]
  ],
  "attr-contenteditable": [
    [
      "HTML/Global_attributes/contenteditable",
      "contenteditable",
      "The contenteditable global attribute is an enumerated attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing."
    ]
  ],
  "attr-contextmenu": [
    [
      "HTML/Global_attributes/contextmenu",
      "contextmenu",
      "The contextmenu global attribute is the id of a <menu> to use as the contextual menu for this element."
    ]
  ],
  "attr-img-crossorigin": [
    [
      "HTML/CORS_settings_attributes",
      "The crossOrigin attribute",
      "In HTML5, some HTML elements which provide support for CORS, such as <img>, <video> or <script>, have a crossorigin attribute (crossOrigin property), which lets you configure the CORS requests for the element's fetched data."
    ]
  ],
  "attr-is": [
    [
      "HTML/Global_attributes/is",
      "is",
      "The is global attribute allows you to specify that a standard HTML element should behave like a defined custom built-in element (see Using custom elements for more details)."
    ]
  ],
  "attr-itemid": [
    [
      "HTML/Global_attributes/itemid",
      "itemid",
      "The itemid global attribute provides microdata in the form of a unique, global identifier of an item."
    ]
  ],
  "attr-itemref": [
    [
      "HTML/Global_attributes/itemref",
      "itemref",
      "The global attribute itemref properties, which are not descendants of an element with the itemscope attribute, can be associated with the item using an itemref."
    ]
  ],
  "attr-itemscope": [
    [
      "HTML/Global_attributes/itemscope",
      "itemscope",
      "itemscope is a boolean global attribute that defines the scope of associated metadata. Specifying the itemscope attribute for an element creates a new item, which results in a number of name-value pairs that are associated with the element."
    ]
  ],
  "attr-itemtype": [
    [
      "HTML/Global_attributes/itemtype",
      "itemtype",
      "The global attribute itemtype specifies the URL of the vocabulary that will be used to define itemprop's (item properties) in the data structure."
    ]
  ],
  "attr-link-rel": [
    [
      "API/HTMLLinkElement/rel",
      "HTMLLinkElement.rel",
      "The HTMLLinkElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <link> element and the current document."
    ]
  ],
  "attr-media-crossorigin": [
    [
      "API/HTMLMediaElement/crossOrigin",
      "HTMLMediaElement.crossOrigin",
      "The HTMLMediaElement.crossOrigin property is the CORS setting for this image element. See CORS settings attributes for details."
    ]
  ],
  "attr-nonce": [
    [
      "API/HTMLElement/nonce",
      "HTMLElement.nonce",
      "The nonce property of the HTMLElement interface returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed."
    ]
  ],
  "attr-slot": [
    [
      "HTML/Global_attributes/slot",
      "slot",
      "The slot global attribute assigns a slot in a shadow DOM shadow tree to an element: An element with a slot attribute is assigned to the slot created by the <slot> element whose name attribute's value matches that slot attribute's value."
    ]
  ],
  "attr-style-media": [
    [
      "API/HTMLStyleElement/media",
      "HTMLStyleElement.media",
      "The HTMLStyleElement.media property specifies the intended destination medium for style information."
    ]
  ],
  "attr-tabindex": [
    [
      "HTML/Global_attributes/tabindex",
      "tabindex",
      "The tabindex global attribute indicates if its element can be focused, and if/where it participates in sequential keyboard navigation (usually with the Tab key, hence the name)."
    ]
  ],
  "attr-translate": [
    [
      "HTML/Global_attributes/translate",
      "translate",
      "The translate global attribute is an enumerated attribute that is used to specify whether an element's attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged."
    ]
  ],
  "audiotrack": [
    [
      "API/AudioTrack",
      "AudioTrack",
      "The AudioTrack interface represents a single audio track from one of the HTML media elements, <audio> or <video>."
    ]
  ],
  "audiotracklist": [
    [
      "API/AudioTrackList",
      "AudioTrackList",
      "The AudioTrackList interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list."
    ]
  ],
  "autocapitalization": [
    [
      "HTML/Global_attributes/autocapitalize",
      "autocapitalize",
      "The autocapitalize global attribute is an enumerated attribute that controls whether and how text input is automatically capitalized as it is entered/edited by the user."
    ]
  ],
  "broadcastchannel": [
    [
      "API/BroadcastChannel",
      "BroadcastChannel",
      "The BroadcastChannel interface represents a named channel that any browsing context of a given origin can subscribe to. It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a message event fired at all BroadcastChannel objects listening to the channel."
    ]
  ],
  "broadcasting-to-other-browsing-contexts": [
    [
      "API/Broadcast_Channel_API",
      "Broadcast Channel API",
      "The Broadcast Channel API allows simple communication between browsing contexts (that is windows, tabs, frames, or iframes) with the same origin (usually pages from the same site)."
    ]
  ],
  "button-state-(type=button)": [
    [
      "HTML/Element/input/button",
      "<input type=\"button\">",
      "<input> elements of type \"button\" are rendered as simple push buttons, which can be programmed to control custom functionality anywhere on a webpage as required when assigned an event handler function (typically for the click event)."
    ]
  ],
  "canvasgradient": [
    [
      "API/CanvasGradient",
      "CanvasGradient",
      "The CanvasGradient interface represents an opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient()."
    ]
  ],
  "canvasimagesource": [
    [
      "API/CanvasImageSource",
      "CanvasImageSource",
      "CanvasImageSource provides a mechanism for other interfaces to be used as image sources for some methods of the CanvasDrawImage and CanvasFillStrokeStyles interfaces. It’s just an internal helper type to simplify the specification. It’s not an interface and there are no objects implementing it."
    ]
  ],
  "canvaspattern": [
    [
      "API/CanvasPattern",
      "CanvasPattern",
      "The CanvasPattern interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method."
    ]
  ],
  "channel-messaging": [
    [
      "API/Channel_Messaging_API",
      "Channel Messaging API",
      "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, two documents via a SharedWorker, or two workers) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end."
    ],
    [
      "API/Channel_Messaging_API/Using_channel_messaging",
      "Using channel messaging",
      "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, or two documents via a SharedWorker) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end. In this article we'll explore the basics of using this technology."
    ]
  ],
  "checkbox-state-(type=checkbox)": [
    [
      "HTML/Element/input/checkbox",
      "<input type=\"checkbox\">",
      "<input> elements of type checkbox are rendered by default as square boxes that are checked (ticked) when activated, like you might see in an official government paper form. They allow you to select single values for submission in a form (or not)."
    ]
  ],
  "classes": [
    [
      "HTML/Global_attributes/class",
      "class",
      "The class global attribute is a space-separated list of the classes of the element. Classes allows CSS and Javascript to select and access specific elements via the class selectors or functions like the DOM method document.getElementsByClassName."
    ]
  ],
  "closeevent": [
    [
      "API/CloseEvent/CloseEvent",
      "CloseEvent()",
      "The CloseEvent() constructor creates a new CloseEvent."
    ]
  ],
  "color-state-(type=color)": [
    [
      "HTML/Element/input/color",
      "<input type=\"color\">",
      "<input> elements of type \"color\" provide a user interface element that lets a user specify a color, either by using a visual color picker interface or by entering the color into a text field in \"#rrggbb\" hexadecimal format."
    ]
  ],
  "commands": [
    [
      "HTML/Element/command",
      "<command>",
      "The HTML Command element (<command>) represents a command which the user can invoke. Commands are often used as part of a context menu or toolbar."
    ]
  ],
  "concept-origin": [
    [
      "API/Document/origin",
      "Document.origin",
      "The Document.origin read-only property returns the document's origin. In most cases, this property is equivalent to document.defaultView.location.origin."
    ]
  ],
  "contenteditable": [
    [
      "API/HTMLElement/contentEditable",
      "HTMLElement.contentEditable",
      "The HTMLElement.contentEditable property is used to indicate whether or not the element is editable."
    ]
  ],
  "cors-settings-attributes": [
    [
      "HTML/CORS_settings_attributes",
      "The crossOrigin attribute",
      "In HTML5, some HTML elements which provide support for CORS, such as <img>, <video> or <script>, have a crossorigin attribute (crossOrigin property), which lets you configure the CORS requests for the element's fetched data."
    ]
  ],
  "current-document-readiness": [
    [
      "API/Document/readyState",
      "Document.readyState",
      "The Document.readyState property of a document describes the loading state of the document."
    ]
  ],
  "custom-handlers": [
    [
      "API/Navigator/registerProtocolHandler",
      "Navigator.registerProtocolHandler()",
      "The Navigator method registerProtocolHandler() lets web sites register themselves as possible handlers for particular protocols."
    ]
  ],
  "customelementregistry": [
    [
      "API/CustomElementRegistry",
      "CustomElementRegistry",
      "The CustomElementRegistry interface provides methods for registering custom elements and querying registered elements. To get an instance of it, use the window.customElements property."
    ]
  ],
  "datatransfer": [
    [
      "API/DataTransfer",
      "DataTransfer",
      "The DataTransfer object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API."
    ]
  ],
  "datatransferitem": [
    [
      "API/DataTransferItem",
      "DataTransferItem",
      "The DataTransferItem object represents one drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object."
    ]
  ],
  "datatransferitemlist": [
    [
      "API/DataTransferItemList",
      "DataTransferItemList",
      "The DataTransferItemList object is a list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList."
    ]
  ],
  "date-state-(type=date)": [
    [
      "HTML/Element/input/date",
      "<input type=\"date\">",
      "<input> elements of type date create input fields that let the user enter a date, either using a text box that automatically validates the content, or using a special date picker interface. The resulting value includes the year, month, and day, but not the time. The time and datetime-local input types support time and date/time inputs."
    ]
  ],
  "dedicatedworkerglobalscope": [
    [
      "API/DedicatedWorkerGlobalScope",
      "DedicatedWorkerGlobalScope",
      "The DedicatedWorkerGlobalScope object (the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers."
    ]
  ],
  "dom-a-download": [
    [
      "API/HTMLAnchorElement/download",
      "HTMLAnchorElement.download",
      "The HTMLAnchorElement.download property Is a DOMString indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it."
    ]
  ],
  "dom-a-rel": [
    [
      "API/HTMLAnchorElement/rel",
      "HTMLAnchorElement.rel",
      "The HTMLAnchorElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <a> element and the current document."
    ]
  ],
  "dom-a-rellist": [
    [
      "API/HTMLAnchorElement/relList",
      "HTMLAnchorElement.relList",
      "The HTMLAnchorElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <a> element and the current document."
    ]
  ],
  "dom-accesskeylabel": [
    [
      "API/HTMLElement/accessKeyLabel",
      "accessKeyLabel",
      "The HTMLElement.accessKeyLabel read-only property returns a String that represents the element's assigned access key (if any); otherwise it returns an empty string."
    ]
  ],
  "dom-alert": [
    [
      "API/Window/alert",
      "Window.alert()",
      "The Window.alert() method displays an alert dialog with the optional specified content and an OK button."
    ]
  ],
  "dom-area-rel": [
    [
      "API/HTMLAreaElement/rel",
      "HTMLAreaElement.rel",
      "The HTMLAreaElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <a> element and the current document."
    ]
  ],
  "dom-area-rellist": [
    [
      "API/HTMLAreaElement/relList",
      "HTMLAreaElement.relList",
      "The HTMLAreaElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <area> element and the current document."
    ]
  ],
  "dom-atob": [
    [
      "API/WindowOrWorkerGlobalScope/atob",
      "WindowOrWorkerGlobalScope.atob()",
      "The WindowOrWorkerGlobalScope.atob() function decodes a string of data which has been encoded using base-64 encoding. You can use the btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31."
    ]
  ],
  "dom-audiotrack-enabled": [
    [
      "API/AudioTrack/enabled",
      "AudioTrack.enabled",
      "The AudioTrack property enabled specifies whether or not the described audio track is currently enabled for use. If the track is disabled by setting enabled to false, the track is muted and does not produce audio."
    ]
  ],
  "dom-audiotrack-id": [
    [
      "API/AudioTrack/id",
      "AudioTrack.id",
      "The id property contains a string which uniquely identifies the track represented by the AudioTrack."
    ]
  ],
  "dom-audiotrack-kind": [
    [
      "API/AudioTrack/kind",
      "AudioTrack.kind",
      "The kind property contains a string indicating the category of audio contained in the AudioTrack."
    ]
  ],
  "dom-audiotrack-label": [
    [
      "API/AudioTrack/label",
      "AudioTrack.label",
      "The read-only AudioTrack property label returns a string specifying the audio track's human-readable label, if one is available; otherwise, it returns an empty string."
    ]
  ],
  "dom-audiotrack-language": [
    [
      "API/AudioTrack/language",
      "AudioTrack.language",
      "The read-only AudioTrack property language returns a string identifying the language used in the audio track."
    ]
  ],
  "dom-audiotracklist-gettrackbyid": [
    [
      "API/AudioTrackList/getTrackById",
      "AudioTrackList.getTrackById()",
      "The AudioTrackList method getTrackById() returns the first AudioTrack object from the track list whose id matches the specified string."
    ]
  ],
  "dom-audiotracklist-length": [
    [
      "API/AudioTrackList/length",
      "AudioTrackList.length",
      "The read-only AudioTrackList property length returns the number of entries in the AudioTrackList, each of which is an AudioTrack representing one audio track in the media element."
    ]
  ],
  "dom-blur": [
    [
      "API/HTMLElement/blur",
      "HTMLElement.blur()",
      "The HTMLElement.blur() method removes keyboard focus from the current element."
    ]
  ],
  "dom-broadcastchannel": [
    [
      "API/Broadcastchannel/BroadcastChannel",
      "BroadcastChannel()",
      "The BroadcastChannel() constructor creates a new BroadcastChannel and connects it to the underlying channel."
    ]
  ],
  "dom-broadcastchannel-close": [
    [
      "API/Broadcastchannel/close",
      "BroadcastChannel.close()",
      "The BroadcastChannel.close() terminates the connection to the underlying channel, allowing the object to be garbage collected. This is a necessary step to perform as there is no other way for a browser to know that this channel is not needed anymore."
    ]
  ],
  "dom-broadcastchannel-name": [
    [
      "API/Broadcastchannel/name",
      "BroadcastChannel.name",
      "The read-only BroadcastChannel.name property returns a DOMString, which uniquely identifies the given channel with its name. This name is passed to the BroadcastChannel() constructor at creation time and is therefore read-only."
    ]
  ],
  "dom-broadcastchannel-postmessage": [
    [
      "API/Broadcastchannel/postMessage",
      "BroadcastChannel.postMessage()",
      "The BroadcastChannel.postMessage() sends a message, which can be of any kind of Object, to each listener in any browser context with the same origin. The message is transmitted as a message event targeted at each BroadcastChannel bound to the channel."
    ]
  ],
  "dom-btoa": [
    [
      "API/WindowOrWorkerGlobalScope/btoa",
      "WindowOrWorkerGlobalScope.btoa()",
      "The WindowOrWorkerGlobalScope.btoa() method creates a base-64 encoded ASCII string from a String object in which each character in the string is treated as a byte of binary data."
    ]
  ],
  "dom-canvas-getcontext": [
    [
      "API/HTMLCanvasElement/getContext",
      "HTMLCanvasElement.getContext()",
      "The HTMLCanvasElement.getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported."
    ]
  ],
  "dom-canvas-toblob": [
    [
      "API/HTMLCanvasElement/toBlob",
      "HTMLCanvasElement.toBlob()",
      "The HTMLCanvasElement.toBlob() method creates a Blob object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent. If type is not specified, the image type is image/png. The created image is in a resolution of 96dpi."
    ]
  ],
  "dom-canvas-todataurl": [
    [
      "API/HTMLCanvasElement/toDataURL",
      "HTMLCanvasElement.toDataURL()",
      "The HTMLCanvasElement.toDataURL() method returns a data URI containing a representation of the image in the format specified by the type parameter (defaults to PNG). The returned image is in a resolution of 96 dpi."
    ]
  ],
  "dom-canvasgradient-addcolorstop": [
    [
      "API/CanvasGradient/addColorStop",
      "CanvasGradient.addColorStop()",
      "The CanvasGradient.addColorStop() method adds a new stop, defined by an offset and a color, to the gradient. If the offset is not between 0 and 1, an INDEX_SIZE_ERR is raised, if the color can't be parsed as a CSS <color>, a SYNTAX_ERR is raised."
    ]
  ],
  "dom-canvaspattern-settransform": [
    [
      "API/CanvasPattern/setTransform",
      "CanvasPattern.setTransform()",
      "The CanvasPattern.setTransform() method uses an SVGMatrix object as the pattern's transformation matrix and invokes it on the pattern."
    ]
  ],
  "dom-clearinterval": [
    [
      "API/WindowOrWorkerGlobalScope/clearInterval",
      "WindowOrWorkerGlobalScope.clearInterval()",
      "The clearInterval() method of the WindowOrWorkerGlobalScope mixin cancels a timed, repeating action which was previously established by a call to setInterval()."
    ]
  ],
  "dom-cleartimeout": [
    [
      "API/WindowOrWorkerGlobalScope/clearTimeout",
      "WindowOrWorkerGlobalScope.clearTimeout()",
      "The clearTimeout() method of the WindowOrWorkerGlobalScope mixin cancels a timeout previously established by calling setTimeout()."
    ]
  ],
  "dom-confirm": [
    [
      "API/Window/confirm",
      "Window.confirm()",
      "The Window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel."
    ]
  ],
  "dom-context-2d-arc": [
    [
      "API/CanvasRenderingContext2D/arc",
      "CanvasRenderingContext2D.arc()",
      "The CanvasRenderingContext2D.arc() method of the Canvas 2D API adds an arc to the path which is centered at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise)."
    ]
  ],
  "dom-context-2d-arcto": [
    [
      "API/CanvasRenderingContext2D/arcTo",
      "CanvasRenderingContext2D.arcTo()",
      "The CanvasRenderingContext2D.arcTo() method of the Canvas 2D API adds an arc to the path with the given control points and radius."
    ]
  ],
  "dom-context-2d-beginpath": [
    [
      "API/CanvasRenderingContext2D/beginPath",
      "CanvasRenderingContext2D.beginPath()",
      "The CanvasRenderingContext2D.beginPath() method of the Canvas 2D API starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path."
    ]
  ],
  "dom-context-2d-beziercurveto": [
    [
      "API/CanvasRenderingContext2D/bezierCurveTo",
      "CanvasRenderingContext2D.bezierCurveTo()",
      "The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas 2D API adds a cubic Bézier curve to the path. It requires three points. The first two points are control points and the third one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the Bézier curve."
    ]
  ],
  "dom-context-2d-canvas": [
    [
      "API/CanvasRenderingContext2D/canvas",
      "CanvasRenderingContext2D.canvas",
      "The CanvasRenderingContext2D.canvas property is a read-only reference to the HTMLCanvasElement object that is associated with the context. It might be null if there is no association with an <canvas> element."
    ]
  ],
  "dom-context-2d-clearrect": [
    [
      "API/CanvasRenderingContext2D/clearRect",
      "CanvasRenderingContext2D.clearRect()",
      "The CanvasRenderingContext2D.clearRect() method of the Canvas 2D API sets all pixels in the rectangle defined by starting point (x, y) and size (width, height) to transparent black, erasing any previously drawn content."
    ]
  ],
  "dom-context-2d-clip": [
    [
      "API/CanvasRenderingContext2D/clip",
      "CanvasRenderingContext2D.clip()",
      "The CanvasRenderingContext2D.clip() method of the Canvas 2D API turns the path currently being built into the current clipping path."
    ]
  ],
  "dom-context-2d-closepath": [
    [
      "API/CanvasRenderingContext2D/closePath",
      "CanvasRenderingContext2D.closePath()",
      "The CanvasRenderingContext2D.closePath() method of the Canvas 2D API causes the point of the pen to move back to the start of the current sub-path. It tries to add a straight line (but does not actually draw it) from the current point to the start. If the shape has already been closed or has only one point, this function does nothing."
    ]
  ],
  "dom-context-2d-createimagedata": [
    [
      "API/CanvasRenderingContext2D/createImageData",
      "CanvasRenderingContext2D.createImageData()",
      "The CanvasRenderingContext2D.createImageData() method of the Canvas 2D API creates a new, blank ImageData object with the specified dimensions. All of the pixels in the new object are transparent black."
    ]
  ],
  "dom-context-2d-createlineargradient": [
    [
      "API/CanvasRenderingContext2D/createLinearGradient",
      "CanvasRenderingContext2D.createLinearGradient()",
      "The CanvasRenderingContext2D.createLinearGradient() method of the Canvas 2D API creates a gradient along the line given by the coordinates represented by the parameters."
    ]
  ],
  "dom-context-2d-createpattern": [
    [
      "API/CanvasRenderingContext2D/createPattern",
      "CanvasRenderingContext2D.createPattern()",
      "The CanvasRenderingContext2D.createPattern() method of the Canvas 2D API creates a pattern using the specified image (a CanvasImageSource). It repeats the source in the directions specified by the repetition argument. This method returns a CanvasPattern."
    ]
  ],
  "dom-context-2d-createradialgradient": [
    [
      "API/CanvasRenderingContext2D/createRadialGradient",
      "CanvasRenderingContext2D.createRadialGradient()",
      "The CanvasRenderingContext2D.createRadialGradient() method of the Canvas 2D API creates a radial gradient given by the coordinates of the two circles represented by the parameters. This method returns a CanvasGradient."
    ]
  ],
  "dom-context-2d-direction": [
    [
      "API/CanvasRenderingContext2D/direction",
      "CanvasRenderingContext2D.direction",
      "The CanvasRenderingContext2D.direction property of the Canvas 2D API specifies the current text direction used when drawing text."
    ]
  ],
  "dom-context-2d-drawfocusifneeded": [
    [
      "API/CanvasRenderingContext2D/drawFocusIfNeeded",
      "CanvasRenderingContext2D.drawFocusIfNeeded()",
      "The CanvasRenderingContext2D.drawFocusIfNeeded() method of the Canvas 2D API draws a focus ring around the current path or given path, If a given element is focused."
    ]
  ],
  "dom-context-2d-drawimage": [
    [
      "API/CanvasRenderingContext2D/drawImage",
      "CanvasRenderingContext2D.drawImage()",
      "The CanvasRenderingContext2D.drawImage() method of the Canvas 2D API provides different ways to draw an image onto the canvas."
    ]
  ],
  "dom-context-2d-ellipse": [
    [
      "API/CanvasRenderingContext2D/ellipse",
      "CanvasRenderingContext2D.ellipse()",
      "The CanvasRenderingContext2D.ellipse() method of the Canvas 2D API adds an ellipse to the path which is centered at (x, y) position with the radii radiusX and radiusY starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise)."
    ]
  ],
  "dom-context-2d-fill": [
    [
      "API/CanvasRenderingContext2D/fill",
      "CanvasRenderingContext2D.fill()",
      "The CanvasRenderingContext2D.fill() method of the Canvas 2D API fills the current or given path with the current fill style using the non-zero or even-odd winding rule."
    ]
  ],
  "dom-context-2d-fillrect": [
    [
      "API/CanvasRenderingContext2D/fillRect",
      "CanvasRenderingContext2D.fillRect()",
      "The CanvasRenderingContext2D.fillRect() method of the Canvas 2D API draws a filled rectangle whose starting point is at the coordinates (x, y) with the specified width and height and whose style is determined by the fillStyle attribute."
    ]
  ],
  "dom-context-2d-fillstyle": [
    [
      "API/CanvasRenderingContext2D/fillStyle",
      "CanvasRenderingContext2D.fillStyle",
      "The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies the color or style to use inside shapes. The default is #000 (black)."
    ]
  ],
  "dom-context-2d-filltext": [
    [
      "API/CanvasRenderingContext2D/fillText",
      "CanvasRenderingContext2D.fillText()",
      "The CanvasRenderingContext2D method fillText(), part of the Canvas 2D API, draws a text string at the specified coordinates, filling the string's characters with the current foreground color. An optional parameter allows specifying a maximum width for the rendered text, which the user agent will achieve by condensing the text or by using a lower font size."
    ]
  ],
  "dom-context-2d-font": [
    [
      "API/CanvasRenderingContext2D/font",
      "CanvasRenderingContext2D.font",
      "The CanvasRenderingContext2D.font property of the Canvas 2D API specifies the current text style being used when drawing text. This string uses the same syntax as the CSS font specifier. The default font is 10px sans-serif."
    ]
  ],
  "dom-context-2d-getimagedata": [
    [
      "API/CanvasRenderingContext2D/getImageData",
      "CanvasRenderingContext2D.getImageData()",
      "The CanvasRenderingContext2D method getImageData() of the Canvas 2D API returns an ImageData object representing the underlying pixel data for a specified portion of the canvas."
    ]
  ],
  "dom-context-2d-getlinedash": [
    [
      "API/CanvasRenderingContext2D/getLineDash",
      "CanvasRenderingContext2D.getLineDash()",
      "The CanvasRenderingContext2D.getLineDash() method of the Canvas 2D API gets the current line dash pattern."
    ]
  ],
  "dom-context-2d-globalalpha": [
    [
      "API/CanvasRenderingContext2D/globalAlpha",
      "CanvasRenderingContext2D.globalAlpha",
      "The CanvasRenderingContext2D.globalAlpha property of the Canvas 2D API specifies the alpha value that is applied to shapes and images before they are drawn onto the canvas. The value is in the range from 0.0 (fully transparent) to 1.0 (fully opaque)."
    ]
  ],
  "dom-context-2d-globalcompositeoperation": [
    [
      "API/CanvasRenderingContext2D/globalCompositeOperation",
      "CanvasRenderingContext2D.globalCompositeOperation",
      "The CanvasRenderingContext2D.globalCompositeOperation property of the Canvas 2D API sets the type of compositing operation to apply when drawing new shapes, where type is a string identifying which of the compositing or blending mode operations to use."
    ]
  ],
  "dom-context-2d-imagesmoothingenabled": [
    [
      "API/CanvasRenderingContext2D/imageSmoothingEnabled",
      "CanvasRenderingContext2D.imageSmoothingEnabled",
      "The CanvasRenderingContext2D.imageSmoothingEnabled property of the Canvas 2D API can be set to change if images are smoothed (true, default) or not (false). On getting the imageSmoothingEnabled property, the last value it was set to, is returned."
    ]
  ],
  "dom-context-2d-ispointinpath": [
    [
      "API/CanvasRenderingContext2D/isPointInPath",
      "CanvasRenderingContext2D.isPointInPath()",
      "The CanvasRenderingContext2D.isPointInPath() method of the Canvas 2D API reports whether or not the specified point is contained in the current path."
    ]
  ],
  "dom-context-2d-ispointinstroke": [
    [
      "API/CanvasRenderingContext2D/isPointInStroke",
      "CanvasRenderingContext2D.isPointInStroke()",
      "The CanvasRenderingContext2D.isPointInStroke() method of the Canvas 2D API reports whether or not the specified point is inside the area contained by the stroking of a path."
    ]
  ],
  "dom-context-2d-linecap": [
    [
      "API/CanvasRenderingContext2D/lineCap",
      "CanvasRenderingContext2D.lineCap",
      "The CanvasRenderingContext2D.lineCap property of the Canvas 2D API determines how the end points of every line are drawn. There are three possible values for this property and those are: butt, round and square. By default this property is set to butt."
    ]
  ],
  "dom-context-2d-linedashoffset": [
    [
      "API/CanvasRenderingContext2D/lineDashOffset",
      "CanvasRenderingContext2D.lineDashOffset",
      "The CanvasRenderingContext2D.lineDashOffset property of the Canvas 2D API sets the line dash pattern offset or \"phase\" to achieve a \"marching ants\" effect, for example."
    ]
  ],
  "dom-context-2d-linejoin": [
    [
      "API/CanvasRenderingContext2D/lineJoin",
      "CanvasRenderingContext2D.lineJoin",
      "The CanvasRenderingContext2D.lineJoin property of the Canvas 2D API determines how two connecting segments (of lines, arcs or curves) with non-zero lengths in a shape are joined together (degenerate segments with zero lengths, whose specified endpoints and control points are exactly at the same position, are skipped)."
    ]
  ],
  "dom-context-2d-lineto": [
    [
      "API/CanvasRenderingContext2D/lineTo",
      "CanvasRenderingContext2D.lineTo()",
      "The CanvasRenderingContext2D.lineTo() method of the Canvas 2D API connects the last point in the sub-path to the x, y coordinates with a straight line (but does not actually draw it)."
    ]
  ],
  "dom-context-2d-linewidth": [
    [
      "API/CanvasRenderingContext2D/lineWidth",
      "CanvasRenderingContext2D.lineWidth",
      "The CanvasRenderingContext2D.lineWidth property of the Canvas 2D API sets the thickness of lines in space units. When getting, it returns the current value (1.0 by default). When setting, zero, negative, Infinity and NaN values are ignored; otherwise the current value is set to the new value."
    ]
  ],
  "dom-context-2d-measuretext": [
    [
      "API/CanvasRenderingContext2D/measureText",
      "CanvasRenderingContext2D.measureText()",
      "The CanvasRenderingContext2D.measureText() method returns a TextMetrics object that contains information about the measured text (such as its width for example)."
    ]
  ],
  "dom-context-2d-miterlimit": [
    [
      "API/CanvasRenderingContext2D/miterLimit",
      "CanvasRenderingContext2D.miterLimit",
      "The CanvasRenderingContext2D.miterLimit property of the Canvas 2D API sets the miter limit ratio in space units. When getting, it returns the current value (10.0 by default). When setting, zero, negative, Infinity and NaN values are ignored; otherwise the current value is set to the new value."
    ]
  ],
  "dom-context-2d-moveto": [
    [
      "API/CanvasRenderingContext2D/moveTo",
      "CanvasRenderingContext2D.moveTo()",
      "The CanvasRenderingContext2D.moveTo() method of the Canvas 2D API moves the starting point of a new sub-path to the (x, y) coordinates."
    ]
  ],
  "dom-context-2d-putimagedata": [
    [
      "API/CanvasRenderingContext2D/putImageData",
      "CanvasRenderingContext2D.putImageData()",
      "The CanvasRenderingContext2D.putImageData() method of the Canvas 2D API paints data from the given ImageData object onto the bitmap. If a dirty rectangle is provided, only the pixels from that rectangle are painted. This method is not affected by the canvas transformation matrix."
    ]
  ],
  "dom-context-2d-quadraticcurveto": [
    [
      "API/CanvasRenderingContext2D/quadraticCurveTo",
      "CanvasRenderingContext2D.quadraticCurveTo()",
      "The CanvasRenderingContext2D.quadraticCurveTo() method of the Canvas 2D API adds a quadratic Bézier curve to the path. It requires two points. The first point is a control point and the second one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the quadratic Bézier curve."
    ]
  ],
  "dom-context-2d-rect": [
    [
      "API/CanvasRenderingContext2D/rect",
      "CanvasRenderingContext2D.rect()",
      "The CanvasRenderingContext2D.rect() method of the Canvas 2D API creates a path for a rectangle at position (x, y) with a size that is determined by width and height. Those four points are connected by straight lines and the sub-path is marked as closed, so that you can fill or stroke this rectangle."
    ]
  ],
  "dom-context-2d-resettransform": [
    [
      "API/CanvasRenderingContext2D/resetTransform",
      "CanvasRenderingContext2D.resetTransform()",
      "The CanvasRenderingContext2D.resetTransform() method of the Canvas 2D API resets the current transform to the identity matrix."
    ]
  ],
  "dom-context-2d-restore": [
    [
      "API/CanvasRenderingContext2D/restore",
      "CanvasRenderingContext2D.restore()",
      "The CanvasRenderingContext2D.restore() method of the Canvas 2D API restores the most recently saved canvas state by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing."
    ]
  ],
  "dom-context-2d-rotate": [
    [
      "API/CanvasRenderingContext2D/rotate",
      "CanvasRenderingContext2D.rotate()",
      "The CanvasRenderingContext2D.rotate() method of the Canvas 2D API adds a rotation to the transformation matrix. The angle argument represents a clockwise rotation angle and is expressed in radians."
    ]
  ],
  "dom-context-2d-save": [
    [
      "API/CanvasRenderingContext2D/save",
      "CanvasRenderingContext2D.save()",
      "The CanvasRenderingContext2D.save() method of the Canvas 2D API saves the entire state of the canvas by pushing the current state onto a stack."
    ]
  ],
  "dom-context-2d-scale": [
    [
      "API/CanvasRenderingContext2D/scale",
      "CanvasRenderingContext2D.scale()",
      "The CanvasRenderingContext2D.scale() method of the Canvas 2D API adds a scaling transformation to the canvas units by x horizontally and by y vertically."
    ]
  ],
  "dom-context-2d-scrollpathintoview": [
    [
      "API/CanvasRenderingContext2D/scrollPathIntoView",
      "CanvasRenderingContext2D.scrollPathIntoView()",
      "The CanvasRenderingContext2D.scrollPathIntoView() method of the Canvas 2D API scrolls the current or given path into the view. It is similar to Element.scrollIntoView()."
    ]
  ],
  "dom-context-2d-setlinedash": [
    [
      "API/CanvasRenderingContext2D/setLineDash",
      "CanvasRenderingContext2D.setLineDash()",
      "The setLineDash() method of the Canvas 2D API's CanvasRenderingContext2D interface sets the line dash pattern used when stroking lines, using an array of values which specify alternating lengths of lines and gaps which describe the pattern."
    ]
  ],
  "dom-context-2d-settransform": [
    [
      "API/CanvasRenderingContext2D/setTransform",
      "CanvasRenderingContext2D.setTransform()",
      "The CanvasRenderingContext2D.setTransform() method of the Canvas 2D API resets (overrides) the current transformation to the identity matrix and then invokes a transformation described by the arguments of this method."
    ]
  ],
  "dom-context-2d-shadowblur": [
    [
      "API/CanvasRenderingContext2D/shadowBlur",
      "CanvasRenderingContext2D.shadowBlur",
      "The CanvasRenderingContext2D.shadowBlur property of the Canvas 2D API specifies the level of the blurring effect; this value doesn't correspond to a number of pixels and is not affected by the current transformation matrix. The default value is 0."
    ]
  ],
  "dom-context-2d-shadowcolor": [
    [
      "API/CanvasRenderingContext2D/shadowColor",
      "CanvasRenderingContext2D.shadowColor",
      "The CanvasRenderingContext2D.shadowColor property of the Canvas 2D API specifies the color of the shadow."
    ]
  ],
  "dom-context-2d-shadowoffsetx": [
    [
      "API/CanvasRenderingContext2D/shadowOffsetX",
      "CanvasRenderingContext2D.shadowOffsetX",
      "The CanvasRenderingContext2D.shadowOffsetX property of the Canvas 2D API specifies the distance that the shadow will be offset in horizontal distance."
    ]
  ],
  "dom-context-2d-shadowoffsety": [
    [
      "API/CanvasRenderingContext2D/shadowOffsetY",
      "CanvasRenderingContext2D.shadowOffsetY",
      "The CanvasRenderingContext2D.shadowOffsetY property of the Canvas 2D API specifies the distance that the shadow will be offset in vertical distance."
    ]
  ],
  "dom-context-2d-stroke": [
    [
      "API/CanvasRenderingContext2D/stroke",
      "CanvasRenderingContext2D.stroke()",
      "The CanvasRenderingContext2D.stroke() method of the Canvas 2D API strokes the current or given path with the current stroke style using the non-zero winding rule."
    ]
  ],
  "dom-context-2d-strokerect": [
    [
      "API/CanvasRenderingContext2D/strokeRect",
      "CanvasRenderingContext2D.strokeRect()",
      "The CanvasRenderingContext2D.strokeRect() method of the Canvas 2D API paints a rectangle which has a starting point at (x, y) and has a w width and an h height onto the canvas, using the current stroke style."
    ]
  ],
  "dom-context-2d-strokestyle": [
    [
      "API/CanvasRenderingContext2D/strokeStyle",
      "CanvasRenderingContext2D.strokeStyle",
      "The CanvasRenderingContext2D.strokeStyle property of the Canvas 2D API specifies the color or style to use for the lines around shapes. The default is #000 (black)."
    ]
  ],
  "dom-context-2d-stroketext": [
    [
      "API/CanvasRenderingContext2D/strokeText",
      "CanvasRenderingContext2D.strokeText()",
      "The CanvasRenderingContext2D.strokeText() method of the Canvas 2D API strokes — that is, draws the outlines of — the characters of a specified text string at the given (x, y) position."
    ]
  ],
  "dom-context-2d-textalign": [
    [
      "API/CanvasRenderingContext2D/textAlign",
      "CanvasRenderingContext2D.textAlign",
      "The CanvasRenderingContext2D.textAlign property of the Canvas 2D API specifies the current text alignment being used when drawing text. Beware that the alignment is based on the x value of the fillText() method. So if textAlign is \"center\", then the text would be drawn at x - (width / 2)."
    ]
  ],
  "dom-context-2d-textbaseline": [
    [
      "API/CanvasRenderingContext2D/textBaseline",
      "CanvasRenderingContext2D.textBaseline",
      "The CanvasRenderingContext2D.textBaseline property of the Canvas 2D API specifies the current text baseline being used when drawing text."
    ]
  ],
  "dom-context-2d-transform": [
    [
      "API/CanvasRenderingContext2D/transform",
      "CanvasRenderingContext2D.transform()",
      "The CanvasRenderingContext2D.transform() method of the Canvas 2D API multiplies the current transformation with the matrix described by the arguments of this method. You are able to scale, rotate, move and skew the context."
    ]
  ],
  "dom-context-2d-translate": [
    [
      "API/CanvasRenderingContext2D/translate",
      "CanvasRenderingContext2D.translate()",
      "The CanvasRenderingContext2D.translate() method of the Canvas 2D API adds a translation transformation by moving the canvas and its origin x horizontally and y vertically on the grid."
    ]
  ],
  "dom-createimagebitmap": [
    [
      "API/WindowOrWorkerGlobalScope/createImageBitmap",
      "self.createImageBitmap()",
      "The createImageBitmap method exists on the global in both windows and workers. It accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap. Optionally the source is cropped to the rectangle of pixels originating at (sx, sy) with width sw, and height sh."
    ]
  ],
  "dom-customelementregistry-define": [
    [
      "API/CustomElementRegistry/define",
      "CustomElementRegistry.define()",
      "The define() method of the CustomElementRegistry interface defines a new custom element."
    ]
  ],
  "dom-customelementregistry-get": [
    [
      "API/CustomElementRegistry/get",
      "CustomElementRegistry.get()",
      "The get() method of the CustomElementRegistry interface returns the constructor for a previously-defined custom element."
    ]
  ],
  "dom-customelementregistry-whendefined": [
    [
      "API/CustomElementRegistry/whenDefined",
      "CustomElementRegistry.whenDefined()",
      "The whenDefined() method of the CustomElementRegistry interface returns a Promise that resolves when the named element is defined."
    ]
  ],
  "dom-cva-checkvalidity": [
    [
      "API/HTMLSelectElement/checkValidity",
      "HTMLSelectElement.checkValidity()",
      "The HTMLSelectElement.checkValidity() method checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable invalid event at the element, and then returns false."
    ]
  ],
  "dom-cva-reportvalidity": [
    [
      "API/HTMLFormElement/reportValidity",
      "HTMLFormElement.reportValidity()",
      "The HTMLFormElement.reportValidity() method returns true if the element's child controls satisfy their validation constraints. When false is returned, cancelable invalid events are fired for each invalid child and validation problems are reported to the user."
    ]
  ],
  "dom-cva-setcustomvalidity": [
    [
      "API/HTMLSelectElement/setCustomValidity",
      "HTMLSelectElement.setCustomValidity()",
      "The HTMLSelectElement.setCustomValidity() method sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error."
    ]
  ],
  "dom-data-value": [
    [
      "API/HTMLDataElement/value",
      "HTMLDataElement.value",
      "The value property of the HTMLDataElement interface returns a DOMString reflecting the value HTML attribute."
    ]
  ],
  "dom-dataset": [
    [
      "API/HTMLElement/dataset",
      "HTMLElement.dataset",
      "The dataset property on the HTMLElement interface provides read/write access to all the custom data attributes (data-*) set on the element."
    ]
  ],
  "dom-datatransfer": [
    [
      "API/DataTransfer/DataTransfer",
      "DataTransfer()",
      "The DataTransfer constructor creates a new DataTransfer object instance."
    ]
  ],
  "dom-datatransfer-cleardata": [
    [
      "API/DataTransfer/clearData",
      "DataTransfer.clearData()",
      "The DataTransfer.clearData() method removes the drag operation's drag data for the given type. If data for the given type does not exist, this method does nothing."
    ]
  ],
  "dom-datatransfer-dropeffect": [
    [
      "API/DataTransfer/dropEffect",
      "DataTransfer.dropEffect",
      "The DataTransfer.dropEffect property controls the feedback (typically visual) the user is given during a drag and drop operation. It will affect which cursor is displayed while dragging. For example, when the user hovers over a target drop element, the browser's cursor may indicate which type of operation will occur."
    ]
  ],
  "dom-datatransfer-effectallowed": [
    [
      "API/DataTransfer/effectAllowed",
      "DataTransfer.effectAllowed",
      "The DataTransfer.effectAllowed property specifies the effect that is allowed for a drag operation. The copy operation is used to indicate that the data being dragged will be copied from its present location to the drop location. The move operation is used to indicate that the data being dragged will be moved, and the link operation is used to indicate that some form of relationship or connection will be created between the source and drop locations."
    ]
  ],
  "dom-datatransfer-files": [
    [
      "API/DataTransfer/files",
      "DataTransfer.files",
      "The DataTransfer.files property is a list of the files in the drag operation. If the operation includes no files, the list is empty."
    ]
  ],
  "dom-datatransfer-getdata": [
    [
      "API/DataTransfer/getData",
      "DataTransfer.getData()",
      "The DataTransfer.getData() method retrieves drag data (as a DOMString) for the specified type. If the drag operation does not include data, this method returns an empty string."
    ]
  ],
  "dom-datatransfer-items": [
    [
      "API/DataTransfer/items",
      "DataTransfer.items",
      "The read-only DataTransfer property items property is a list of the data transfer items in a drag operation. The list includes one item for each item in the operation and if the operation had no items, the list is empty."
    ]
  ],
  "dom-datatransfer-setdata": [
    [
      "API/DataTransfer/setData",
      "DataTransfer.setData()",
      "The DataTransfer.setData() method sets the drag operation's drag data to the specified data and type. If data for the given type does not exist, it is added at the end of the drag data store, such that the last item in the types list will be the new type. If data for the given type already exists, the existing data is replaced in the same position. That is, the order of the types list is not changed when replacing data of the same type."
    ]
  ],
  "dom-datatransfer-setdragimage": [
    [
      "API/DataTransfer/setDragImage",
      "DataTransfer.setDragImage()",
      "When a drag occurs, a translucent image is generated from the drag target (the element the dragstart event is fired at), and follows the mouse pointer during the drag. This image is created automatically, so you do not need to create it yourself. However, if a custom image is desired, the DataTransfer.setDragImage() method can be used to set the custom image to be used."
    ]
  ],
  "dom-datatransfer-types": [
    [
      "API/DataTransfer/types",
      "DataTransfer.types",
      "The DataTransfer.types read-only property returns an array of the drag data formats (as strings) that were set in the dragstart event. The order of the formats is the same order as the data included in the drag operation."
    ]
  ],
  "dom-datatransferitem-getasfile": [
    [
      "API/DataTransferItem/getAsFile",
      "DataTransferItem.getAsFile()",
      "If the item is a file, the DataTransferItem.getAsFile() method returns the drag data item's File object. If the item is not a file, this method returns null."
    ]
  ],
  "dom-datatransferitem-getasstring": [
    [
      "API/DataTransferItem/getAsString",
      "DataTransferItem.getAsString()",
      "The DataTransferItem.getAsString() method invokes the given callback with the drag data item's string data as the argument if the item's kind is a Plain unicode string (i.e. kind is string)."
    ]
  ],
  "dom-datatransferitem-kind": [
    [
      "API/DataTransferItem/kind",
      "DataTransferItem.kind",
      "The read-only DataTransferItem.kind property returns a DataTransferItem representing the drag data item kind: some text or some file."
    ]
  ],
  "dom-datatransferitem-type": [
    [
      "API/DataTransferItem/type",
      "DataTransferItem.type",
      "The read-only DataTransferItem.type property returns the type (format) of the DataTransferItem object representing the drag data item. The type is a Unicode string generally given by a MIME type, although a MIME type is not required."
    ]
  ],
  "dom-datatransferitemlist-add": [
    [
      "API/DataTransferItemList/add",
      "DataTransferItemList.add()",
      "The DataTransferItemList.add() method creates a new DataTransferItem using the specified data and adds it to the drag data list. The item may be a File or a string of a given type. If the item is successfully added to the list, the newly-created DataTransferItem object is returned."
    ]
  ],
  "dom-datatransferitemlist-clear": [
    [
      "API/DataTransferItemList/clear",
      "DataTransferItemList.clear()",
      "The DataTransferItemList method clear() removes all DataTransferItem objects from the drag data items list, leaving the list empty."
    ]
  ],
  "dom-datatransferitemlist-length": [
    [
      "API/DataTransferItemList/length",
      "DataTransferItemList.length",
      "The read-only length property of the DataTransferItemList interface returns the number of items currently in the drag item list."
    ]
  ],
  "dom-datatransferitemlist-remove": [
    [
      "API/DataTransferItemList/remove",
      "DataTransferItemList.remove()",
      "undefined."
    ]
  ],
  "dom-dedicatedworkerglobalscope-close": [
    [
      "API/DedicatedWorkerGlobalScope/close",
      "DedicatedWorkerGlobalScope.close()",
      "The close() method of the DedicatedWorkerGlobalScope interface discards any tasks queued in the DedicatedWorkerGlobalScope's event loop, effectively closing this particular scope."
    ],
    [
      "API/WorkerGlobalScope/close",
      "WorkerGlobalScope.close()",
      "The close() method of the WorkerGlobalScope interface discards any tasks queued in the WorkerGlobalScope's event loop, effectively closing this particular scope."
    ]
  ],
  "dom-dedicatedworkerglobalscope-name": [
    [
      "API/DedicatedWorkerGlobalScope/name",
      "DedicatedWorkerGlobalScope.name",
      "The name read-only property of the DedicatedWorkerGlobalScope interface returns the name that the Worker was (optionally) given when it was created. This is the name that the Worker() constructor can pass to get a reference to the DedicatedWorkerGlobalScope."
    ]
  ],
  "dom-dedicatedworkerglobalscope-postmessage": [
    [
      "API/DedicatedWorkerGlobalScope/postMessage",
      "DedicatedWorkerGlobalScope.postMessage()",
      "The postMessage() method of the DedicatedWorkerGlobalScope interface sends a message to the main thread that spawned it. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references."
    ]
  ],
  "dom-dialog-close": [
    [
      "API/HTMLDialogElement/close",
      "HTMLDialogElement.close()",
      "Void."
    ]
  ],
  "dom-dialog-open": [
    [
      "API/HTMLDialogElement/open",
      "HTMLDialogElement.open",
      "A Boolean representing the state of the open HTML attribute. true means it is set, and therefore the dialog is shown. false means it not set, and therefore the dialog is not shown."
    ]
  ],
  "dom-dialog-returnvalue": [
    [
      "API/HTMLDialogElement/returnValue",
      "HTMLDialogElement.returnValue",
      "The returnValue property of the HTMLDialogElement interface gets or sets the return value for the <dialog>, usually to indicate which button the user pressed to close it."
    ]
  ],
  "dom-dialog-show": [
    [
      "API/HTMLDialogElement/show",
      "HTMLDialogElement.show()",
      "None."
    ]
  ],
  "dom-dialog-showmodal": [
    [
      "API/HTMLDialogElement/showModal",
      "HTMLDialogElement.showModal()",
      "None."
    ]
  ],
  "dom-dir": [
    [
      "API/HTMLElement/dir",
      "HTMLElement.dir",
      "The HTMLElement.dir property gets or sets the text writing directionality of the content of the current element."
    ]
  ],
  "dom-document-2": [
    [
      "API/Window/document",
      "Window.document",
      "window.document returns a reference to the document contained in the window."
    ]
  ],
  "dom-document-activeelement": [
    [
      "API/DocumentOrShadowRoot/activeElement",
      "DocumentOrShadowRoot.activeElement",
      "The activeElement read-only property of the Document and ShadowRoot interfaces returns the Element within the DOM or shadow DOM tree that currently has focus."
    ]
  ],
  "dom-document-anchors": [
    [
      "API/Document/anchors",
      "Document.anchors",
      "The anchors read-only property of the Document interface returns a list of all of the anchors in the document."
    ]
  ],
  "dom-document-applets": [
    [
      "API/Document/applets",
      "Document.applets",
      "The applets property of the Document interface returns a list of the applets within a document."
    ]
  ],
  "dom-document-body": [
    [
      "API/Document/body",
      "Document.body",
      "Returns the <body> or <frameset> node of the current document, or null if no such element exists."
    ]
  ],
  "dom-document-close": [
    [
      "API/Document/close",
      "Document.close()",
      "The document.close() method finishes writing to a document, opened with document.open()."
    ]
  ],
  "dom-document-currentscript": [
    [
      "API/Document/currentScript",
      "Document.currentScript",
      "Returns the <script> element whose script is currently being processed."
    ]
  ],
  "dom-document-defaultview": [
    [
      "API/Document/defaultView",
      "Document.defaultView",
      "In browsers, document.defaultView returns the window object associated with a document, or null if none is available."
    ]
  ],
  "dom-document-dir": [
    [
      "API/Document/dir",
      "Document.dir",
      "The Document.dir property is a DOMString representing the directionality of the text of the document, whether left to right (default) or right to left. Possible values are 'rtl', right to left, and 'ltr', left to right."
    ]
  ],
  "dom-document-embeds": [
    [
      "API/Document/embeds",
      "Document.embeds",
      "The embeds read-only property of the Document interface returns a list of the embedded <object> elements within the current document."
    ]
  ],
  "dom-document-forms": [
    [
      "API/Document/forms",
      "Document.forms",
      "The forms read-only property of the Document interface returns an HTMLCollection listing all the <form> elements contained in the document."
    ]
  ],
  "dom-document-getelementsbyname": [
    [
      "API/Document/getElementsByName",
      "Document.getElementsByName()",
      "The getElementsByName() method of the document object returns a NodeList Collection of elements with a given name in the document."
    ]
  ],
  "dom-document-hasfocus": [
    [
      "API/Document/hasFocus",
      "Document.hasFocus()",
      "false if the active element in the document has no focus; true if the active element in the document has focus."
    ]
  ],
  "dom-document-head": [
    [
      "API/Document/head",
      "Document.head",
      "The head read-only property of the Document interface returns the <head> element of the current document."
    ]
  ],
  "dom-document-images": [
    [
      "API/Document/images",
      "Document.images",
      "The images read-only property of the Document interface returns a collection of the images in the current HTML document."
    ]
  ],
  "dom-document-links": [
    [
      "API/Document/links",
      "Document.links",
      "The links read-only property of the Document interface returns a collection of all <area> elements and <a> elements in a document with a value for the href attribute."
    ]
  ],
  "dom-document-open": [
    [
      "API/Document/open",
      "Document.open()",
      "The Document.open() method opens a document for writing."
    ]
  ],
  "dom-document-plugins": [
    [
      "API/Document/plugins",
      "Document.plugins",
      "The plugins read-only property of the Document interface returns an HTMLCollection object containing one or more HTMLEmbedElements representing the <embed> elements in the current document."
    ]
  ],
  "dom-document-scripts": [
    [
      "API/Document/scripts",
      "Document.scripts",
      "The scripts property of the Document interface returns a list of the <script> elements in the document. The returned object is an HTMLCollection."
    ]
  ],
  "dom-document-write": [
    [
      "API/Document/write",
      "Document.write()",
      "Writes a string of text to a document stream opened by document.open()."
    ]
  ],
  "dom-document-writeln": [
    [
      "API/Document/writeln",
      "Document.writeln()",
      "Writes a string of text followed by a newline character to a document."
    ]
  ],
  "dom-dragevent-datatransfer": [
    [
      "API/DragEvent/dataTransfer",
      "DragEvent.dataTransfer",
      "The DragEvent.dataTransfer property holds the drag operation's data (as a DataTransfer object)."
    ]
  ],
  "dom-eventsource": [
    [
      "API/EventSource/EventSource",
      "EventSource()",
      "The EventSource() constructor returns a newly-created EventSource, which represents a remote resource."
    ]
  ],
  "dom-eventsource-close": [
    [
      "API/EventSource/close",
      "EventSource.close()",
      "The close() method of the EventSource interface closes the connection, if one is made, and sets the EventSource.readyState attribute to 2 (closed)."
    ]
  ],
  "dom-eventsource-readystate": [
    [
      "API/EventSource/readyState",
      "EventSource.readyState",
      "The readyState read-only property of the EventSource interface returns a number representing the state of the connection."
    ]
  ],
  "dom-eventsource-url": [
    [
      "API/EventSource/url",
      "EventSource.url",
      "The url read-only property of the EventSource interface returns a DOMString representing the URL of the source."
    ]
  ],
  "dom-eventsource-withcredentials": [
    [
      "API/EventSource/withCredentials",
      "EventSource.withCredentials",
      "The withCredentials read-only property of the EventSource interface returns a Boolean indicating whether the EventSource object was instantiated with CORS credentials set."
    ]
  ],
  "dom-fae-form": [
    [
      "API/HTMLSelectElement/form",
      "HTMLSelectElement.form",
      "The HTMLSelectElement.form read-only property returns a HTMLFormElement representing the form that this element is associated with. If the element is not associated with of a <form> element, then it returns null."
    ]
  ],
  "dom-fe-autofocus": [
    [
      "API/HTMLSelectElement/autofocus",
      "HTMLSelectElement.autofocus",
      "The HTMLSelectElement.autofocus property is a Boolean that reflects the autofocus HTML attribute, which indicates whether the associated <select> element  will get input focus when the page loads, unless the user overrides it."
    ]
  ],
  "dom-fe-disabled": [
    [
      "API/HTMLSelectElement/disabled",
      "HTMLSelectElement.disabled",
      "The HTMLSelectElement.disabled Is a Boolean that reflects the disabled HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks. A disabled element is unusable and un-clickable."
    ]
  ],
  "dom-focus": [
    [
      "API/HTMLElement/focus",
      "HTMLElement.focus()",
      "The HTMLElement.focus() method sets focus on the specified element, if it can be focused."
    ]
  ],
  "dom-form-elements": [
    [
      "API/HTMLFormElement/elements",
      "HTMLFormElement.elements",
      "The HTMLFormElement property elements returns an HTMLFormControlsCollection listing all the form controls contained in the <form> element."
    ]
  ],
  "dom-frameelement": [
    [
      "API/Window/frameElement",
      "Window.frameElement",
      "Returns the element (such as <iframe> or <object>) in which the window is embedded, or null if the element is either top-level or is embedded into a document with a different script origin; that is, in cross-origin situations."
    ]
  ],
  "dom-frames": [
    [
      "API/Window/frames",
      "Window.frames",
      "Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window."
    ]
  ],
  "dom-hashchangeevent-newurl": [
    [
      "API/HashChangeEvent/newURL",
      "HashChangeEvent.newURL",
      "The newURL read-only property returns the new URL to which the window is navigating."
    ]
  ],
  "dom-hashchangeevent-oldurl": [
    [
      "API/HashChangeEvent/oldURL",
      "HashChangeEvent.oldURL",
      "The oldURL read-only property returns the previous URL from which the window was navigated."
    ]
  ],
  "dom-hidden": [
    [
      "API/HTMLElement/hidden",
      "HTMLElement.hidden",
      "The HTMLElement property hidden is a Boolean which is true if the element is hidden; otherwise the value is false. This is quite different from using the CSS property display to control the visibility of an element."
    ]
  ],
  "dom-history-length": [
    [
      "API/History/length",
      "History.length",
      "The History.length read-only property returns an Integer representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns 1."
    ]
  ],
  "dom-htmlformcontrolscollection-nameditem": [
    [
      "API/HTMLFormControlsCollection/namedItem",
      "HTMLFormControlsCollection.namedItem()",
      "Note that this version of namedItem() hides the one inherited from HTMLCollection. Like that one, in JavaScript, using the array bracket syntax with a String, like collection[\"value\"] is equivalent to collection.namedItem(\"value\")."
    ]
  ],
  "dom-hyperlink-hash": [
    [
      "API/HTMLHyperlinkElementUtils/hash",
      "HTMLHyperlinkElementUtils.hash",
      "The HTMLHyperlinkElementUtils.hash property returns a DOMString containing a '#' followed by the fragment identifier of the URL."
    ]
  ],
  "dom-hyperlink-host": [
    [
      "API/HTMLHyperlinkElementUtils/host",
      "HTMLHyperlinkElementUtils.host",
      "The HTMLHyperlinkElementUtils.host property is a USVString containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL."
    ]
  ],
  "dom-hyperlink-hostname": [
    [
      "API/HTMLHyperlinkElementUtils/hostname",
      "HTMLHyperlinkElementUtils.hostname",
      "The HTMLHyperlinkElementUtils.hostname property is a USVString containing the domain of the URL."
    ]
  ],
  "dom-hyperlink-href": [
    [
      "API/HTMLHyperlinkElementUtils/href",
      "HTMLHyperlinkElementUtils.href",
      "The HTMLHyperlinkElementUtils.href property is a USVString containing the whole URL."
    ]
  ],
  "dom-hyperlink-origin": [
    [
      "API/HTMLHyperlinkElementUtils/origin",
      "HTMLHyperlinkElementUtils.origin",
      "The HTMLHyperlinkElementUtils.origin read-only property is a USVString containing the Unicode serialization of the origin of the represented URL"
    ]
  ],
  "dom-hyperlink-password": [
    [
      "API/HTMLHyperlinkElementUtils/password",
      "HTMLHyperlinkElementUtils.password",
      "The HTMLHyperlinkElementUtils.password property is a USVString containing the password specified before the domain name."
    ]
  ],
  "dom-hyperlink-pathname": [
    [
      "API/HTMLHyperlinkElementUtils/pathname",
      "HTMLHyperlinkElementUtils.pathname",
      "The HTMLHyperlinkElementUtils.pathname property is a USVString containing an initial '/' followed by the path of the URL (or the empty string if there is no path)."
    ]
  ],
  "dom-hyperlink-port": [
    [
      "API/HTMLHyperlinkElementUtils/port",
      "HTMLHyperlinkElementUtils.port",
      "The HTMLHyperlinkElementUtils.port property is a USVString containing the port number of the URL. If the URL does not contain an explicit port number, it will be set to ''."
    ]
  ],
  "dom-hyperlink-protocol": [
    [
      "API/HTMLHyperlinkElementUtils/protocol",
      "HTMLHyperlinkElementUtils.protocol",
      "The HTMLHyperlinkElementUtils.protocol property is a USVString representing the protocol scheme of the URL, including the final ':'."
    ]
  ],
  "dom-hyperlink-search": [
    [
      "API/HTMLHyperlinkElementUtils/search",
      "HTMLHyperlinkElementUtils.search",
      "The HTMLHyperlinkElementUtils.search property is a search string, also called a query string, that is USVString containing a '?' followed by the parameters of the URL."
    ]
  ],
  "dom-hyperlink-username": [
    [
      "API/HTMLHyperlinkElementUtils/username",
      "HTMLHyperlinkElementUtils.username",
      "The HTMLHyperlinkElementUtils.username property is a USVString containing the username specified before the domain name."
    ]
  ],
  "dom-iframe-allowpaymentrequest": [
    [
      "API/HTMLIFrameElement/allowPaymentRequest",
      "HTMLIFrameElement.allowPaymentRequest",
      "The allowPaymentRequest property of the HTMLIFrameElement interface returns a Boolean indicating whether the Payment Request API may be invoked on a cross-origin iframe."
    ]
  ],
  "dom-iframe-contentdocument": [
    [
      "API/HTMLIFrameElement/contentDocument",
      "contentDocument",
      "Returns a Document, the active document in the inline frame's nested browsing context."
    ]
  ],
  "dom-iframe-contentwindow": [
    [
      "API/HTMLIFrameElement/contentWindow",
      "HTMLIFrameElement.contentWindow",
      "The contentWindow property returns the Window object of an <iframe> element. You can use this Window object to access the iframe's document and its internal DOM. This attribute is read-only, but its properties can be manipulated like the global Window object."
    ]
  ],
  "dom-iframe-referrerpolicy": [
    [
      "API/HTMLIFrameElement/referrerPolicy",
      "HTMLIFrameElement.referrerPolicy",
      "The HTMLIFrameElement.referrerPolicy property reflects the HTML referrerpolicy attribute of the <iframe> element defining which referrer is sent when fetching the resource."
    ]
  ],
  "dom-image": [
    [
      "API/HTMLImageElement/Image",
      "Image()",
      "The Image() constructor creates a new HTMLImageElement instance."
    ]
  ],
  "dom-imagebitmap-close": [
    [
      "API/ImageBitmap/close",
      "ImageBitmap.close()",
      "The ImageBitmap.close() method disposes of all graphical resources associated with an ImageBitmap."
    ]
  ],
  "dom-imagebitmap-height": [
    [
      "API/ImageBitmap/height",
      "ImageBitmap.height",
      "The read-only ImageBitmap.height property returns the ImageBitmap object's height in CSS pixels."
    ]
  ],
  "dom-imagebitmap-width": [
    [
      "API/ImageBitmap/width",
      "ImageBitmap.width",
      "The read-only ImageBitmap.width property returns the ImageBitmap object's width in CSS pixels."
    ]
  ],
  "dom-imagedata": [
    [
      "API/ImageData/ImageData",
      "ImageData()",
      "The ImageData() constructor returns a newly instantiated ImageData object build from the typed array given and having the specified width and height."
    ]
  ],
  "dom-imagedata-data": [
    [
      "API/ImageData/data",
      "ImageData.data",
      "The readonly ImageData.data property returns a Uint8ClampedArray representing a one-dimensional array containing the data in the RGBA order, with integer values between 0 and 255 (included)."
    ]
  ],
  "dom-imagedata-height": [
    [
      "API/ImageData/height",
      "ImageData.height",
      "The readonly ImageData.height property returns the number of rows in the image data object."
    ]
  ],
  "dom-imagedata-width": [
    [
      "API/ImageData/width",
      "ImageData.width",
      "The readonly ImageData.width property returns the number of pixels per row in the image data object."
    ]
  ],
  "dom-img-decoding": [
    [
      "API/HTMLImageElement/decoding",
      "HTMLImageElement.decoding",
      "The decoding property of the HTMLImageElement interface represents a hint given to the browser on how it should decode the image."
    ]
  ],
  "dom-iscontenteditable": [
    [
      "API/HTMLElement/isContentEditable",
      "HTMLElement.isContentEditable",
      "The HTMLElement.isContentEditable read-only property returns a Boolean that is true if the contents of the element are editable; otherwise it returns false."
    ]
  ],
  "dom-label-control": [
    [
      "API/HTMLLabelElement/control",
      "HTMLLabelElement.control",
      "The read-only HTMLLabelElement.control property returns a reference to the control (in the form of an object of type HTMLElement or one of its derivatives) with which the <label> element is associated, or null if the label isn't associated with a control."
    ]
  ],
  "dom-label-form": [
    [
      "API/HTMLLabelElement/form",
      "HTMLLabelElement.form",
      "The read-only HTMLLabelElement.form property returns an HTMLFormElement object which represents the form of which the label's associated control is a part, or null if there is either no associated control, or if that control isn't in a form."
    ]
  ],
  "dom-label-htmlfor": [
    [
      "API/HTMLLabelElement/htmlFor",
      "HTMLLabelElement.htmlFor",
      "The HTMLLabelElement.htmlFor property reflects the value of the for content property. That means that this script-accessible property is used to set and read the value of the content property for, which is the ID of the label's associated control element."
    ]
  ],
  "dom-length": [
    [
      "API/Window/length",
      "Window.length",
      "Returns the number of frames (either <frame> or <iframe> elements) in the window."
    ]
  ],
  "dom-lfe-labels": [
    [
      "API/HTMLButtonElement/labels",
      "HTMLButtonElement.labels",
      "The HTMLButtonElement.labels read-only property returns a NodeList of the <label> elements associated with the <button> element."
    ],
    [
      "API/HTMLInputElement/labels",
      "HTMLInputElement.labels",
      "The HTMLInputElement.labels read-only property returns a NodeList of the <label> elements associated with the <input> element."
    ],
    [
      "API/HTMLMeterElement/labels",
      "HTMLMeterElement.labels",
      "The HTMLMeterElement.labels read-only property returns a NodeList of the <label> elements associated with the <meter> element."
    ],
    [
      "API/HTMLOutputElement/labels",
      "HTMLOutputElement.labels",
      "The HTMLOutputElement.labels read-only property returns a NodeList of the <label> elements associated with the <output> element."
    ],
    [
      "API/HTMLProgressElement/labels",
      "HTMLProgressElement.labels",
      "The HTMLProgressElement.labels read-only property returns a NodeList of the <label> elements associated with the <progress> element."
    ],
    [
      "API/HTMLSelectElement/labels",
      "HTMLSelectElement.labels",
      "The HTMLSelectElement.labels read-only property returns a NodeList of the <label> elements associated with the <select> element."
    ],
    [
      "API/HTMLTextAreaElement/labels",
      "HTMLTextAreaElement.labels",
      "The HTMLTextAreaElement.labels read-only property returns a NodeList of the <label> elements associated with the <textarea> element."
    ]
  ],
  "dom-link-rellist": [
    [
      "API/HTMLLinkElement/relList",
      "HTMLLinkElement.relList",
      "The HTMLLinkElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <link> element and the current document."
    ]
  ],
  "dom-localstorage": [
    [
      "API/Window/localStorage",
      "window.localStorage",
      "The read-only localStorage property allows you to access a Storage object for the Document's origin; the stored data is saved across browser sessions."
    ]
  ],
  "dom-location-assign": [
    [
      "API/Location/assign",
      "Location.assign()",
      "The Location.assign() method causes the window to load and display the document at the URL specified."
    ]
  ],
  "dom-location-reload": [
    [
      "API/Location/reload",
      "Location.reload()",
      "The Location.reload() method reloads the resource from the current URL. Its optional unique parameter is a Boolean, which, when it is true, causes the page to always be reloaded from the server. If it is false or not specified, the browser may reload the page from its cache. Besides caching behaviour the forcedReload flag also impacts how some browsers handle the scroll position: ordinary reload tries to restore the scroll position after reloading the page, while in forced mode (when parameter is set to true) the new DOM gets loaded with scrollTop == 0."
    ]
  ],
  "dom-location-replace": [
    [
      "API/Location/replace",
      "Location.replace()",
      "The Location.replace() method replaces the current resource with the one at the provided URL. The difference from the assign() method is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it."
    ]
  ],
  "dom-media-audiotracks": [
    [
      "API/HTMLMediaElement/audioTracks",
      "HTMLMediaElement.audioTracks",
      "The read-only audioTracks property on HTMLMediaElement objects returns an AudioTrackList object listing all of the  AudioTrack objects representing the media element's audio tracks."
    ]
  ],
  "dom-media-autoplay": [
    [
      "API/HTMLMediaElement/autoplay",
      "HTMLMediaElement.autoplay",
      "The HTMLMediaElement.autoplay property reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption."
    ]
  ],
  "dom-media-controls": [
    [
      "API/HTMLMediaElement/controls",
      "HTMLMediaElement.controls",
      "The HTMLMediaElement.controls property reflects the controls HTML attribute, which controls whether user interface controls for playing the media item will be displayed."
    ]
  ],
  "dom-media-currentsrc": [
    [
      "API/HTMLMediaElement/currentSrc",
      "HTMLMediaElement.currentSrc",
      "The HTMLMediaElement.currentSrc property contains the absolute URL of the chosen media resource. This could happen, for example, if the web server selects a media file based on the resolution of the user's display. The value is an empty string if the networkState property is EMPTY."
    ]
  ],
  "dom-media-currenttime": [
    [
      "API/HTMLMediaElement/currentTime",
      "HTMLMediaElement.currentTime",
      "The HTMLMediaElement.currentTime property gives the current playback time in seconds. Setting this value seeks the media to the new time."
    ]
  ],
  "dom-media-defaultmuted": [
    [
      "API/HTMLMediaElement/defaultMuted",
      "HTMLMediaElement.defaultMuted",
      "The HTMLMediaElement.defaultMuted property reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default. This property has no dynamic effect. To mute and unmute the audio output, use the muted property."
    ]
  ],
  "dom-media-defaultplaybackrate": [
    [
      "API/HTMLMediaElement/defaultPlaybackRate",
      "HTMLMediaElement.defaultPlaybackRate",
      "The HTMLMediaElement.defaultPlaybackRate property indicates the default playback rate for the media."
    ]
  ],
  "dom-media-duration": [
    [
      "API/HTMLMediaElement/duration",
      "HTMLMediaElement.duration",
      "The HTMLMediaElement.duration property gives the length of the media in seconds, or zero if no media data is available."
    ]
  ],
  "dom-media-ended": [
    [
      "API/HTMLMediaElement/ended",
      "HTMLMediaElement.ended",
      "The HTMLMediaElement.ended indicates whether the media element has ended playback."
    ]
  ],
  "dom-media-error": [
    [
      "API/HTMLMediaElement/error",
      "HTMLMediaElement.error",
      "The HTMLMediaElement.error is the MediaError object for the most recent error, or null if there has not been an error. When an error event is received by the element, you can determine details about what happened by examining this object."
    ]
  ],
  "dom-media-fastseek": [
    [
      "API/HTMLMediaElement/fastSeek",
      "HTMLMediaElement.fastSeek()",
      "The HTMLMediaElement.fastSeek() method quickly seeks the media to the new time with precision tradeoff."
    ]
  ],
  "dom-media-loop": [
    [
      "API/HTMLMediaElement/loop",
      "HTMLMediaElement.loop",
      "The HTMLMediaElement.loop property reflects the loop HTML attribute, which controls whether the media element should start over when it reaches the end."
    ]
  ],
  "dom-media-muted": [
    [
      "API/HTMLMediaElement/muted",
      "HTMLMediaElement.muted",
      "The HTMLMediaElement.muted indicates whether the media element muted."
    ]
  ],
  "dom-media-networkstate": [
    [
      "API/HTMLMediaElement/networkState",
      "HTMLMediaElement.networkState",
      "The HTMLMediaElement.networkState property indicates the current state of the fetching of media over the network."
    ]
  ],
  "dom-media-pause": [
    [
      "API/HTMLMediaElement/pause",
      "HTMLMediaElement.pause()",
      "The HTMLMediaElement.pause() method will pause playback of the media, if the media is already in a paused state this method will have no effect."
    ]
  ],
  "dom-media-paused": [
    [
      "API/HTMLMediaElement/paused",
      "HTMLMediaElement.paused",
      "The read-only HTMLMediaElement.paused property tells whether the media element is paused."
    ]
  ],
  "dom-media-play": [
    [
      "API/HTMLMediaElement/play",
      "HTMLMediaElement.play()",
      "The HTMLMediaElement method play() attempts to begin playback of the media. It returns a Promise which is resolved when playback has been successfully started."
    ]
  ],
  "dom-media-playbackrate": [
    [
      "API/HTMLMediaElement/playbackRate",
      "HTMLMediaElement.playbackRate",
      "The HTMLMediaElement.playbackRate property sets the rate at which the media is being played back. This is used to implement user controls for fast forward, slow motion, and so forth. The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed."
    ]
  ],
  "dom-media-readystate": [
    [
      "API/HTMLMediaElement/readyState",
      "HTMLMediaElement.readyState",
      "The HTMLMediaElement.readyState property indicates the readiness state of the media."
    ]
  ],
  "dom-media-seekable": [
    [
      "API/HTMLMediaElement/seekable",
      "HTMLMediaElement.seekable",
      "The seekable read-only property of the HTMLMediaElement returns a TimeRanges object that contains the time ranges that the user is able to seek to, if any."
    ]
  ],
  "dom-media-src": [
    [
      "API/HTMLMediaElement/src",
      "HTMLMediaElement.src",
      "The HTMLMediaElement.src property reflects the value of the HTML media element's src attribute, which indicates the URL of a media resource to use in the element."
    ]
  ],
  "dom-media-srcobject": [
    [
      "API/HTMLMediaElement/srcObject",
      "HTMLMediaElement.srcObject",
      "The srcObject property of the HTMLMediaElement interface sets or returns the object which serves as the source of the media associated with the HTMLMediaElement."
    ]
  ],
  "dom-media-videotracks": [
    [
      "API/HTMLMediaElement/videoTracks",
      "videoTracks",
      "The read-only videoTracks property on HTMLMediaElement objects returns a VideoTrackList object listing all of the VideoTrack objects representing the media element's video tracks."
    ]
  ],
  "dom-media-volume": [
    [
      "API/HTMLMediaElement/volume",
      "HTMLMediaElement.volume",
      "The HTMLMediaElement.volume property sets the volume at which the media will be played."
    ]
  ],
  "dom-mediaerror-code": [
    [
      "API/MediaError/code",
      "MediaError.code",
      "The read-only property MediaError.code returns a numeric value which represents the kind of error that occurred on a media element. To get a text string with specific diagnostic information, see MediaError.message."
    ]
  ],
  "dom-mediaerror-message": [
    [
      "API/MediaError/message",
      "MediaError.message",
      "The read-only property MediaError.message returns a DOMString which contains a human-readable string offering specific diagnostic details related to the error described by the MediaError object, or an empty string (\"\") if no diagnostic information can be determined or provided."
    ]
  ],
  "dom-messagechannel": [
    [
      "API/MessageChannel/MessageChannel",
      "MessageChannel()",
      "The MessageChannel() constructor of the MessageChannel interface returns a new MessageChannel object with two new MessagePort objects."
    ]
  ],
  "dom-messagechannel-port1": [
    [
      "API/MessageChannel/port1",
      "MessageChannel.port1",
      "The port1 read-only property of the MessageChannel interface returns the first port of the message channel — the port attached to the context that originated the channel."
    ]
  ],
  "dom-messagechannel-port2": [
    [
      "API/MessageChannel/port2",
      "MessageChannel.port2",
      "The port2 read-only property of the MessageChannel interface returns the second port of the message channel — the port attached to the context at the other end of the channel, which the message is initially sent to."
    ]
  ],
  "dom-messageevent-ports": [
    [
      "API/MessageEvent/ports",
      "MessageEvent.ports",
      "The ports read-only property of the MessageEvent interface is an array of MessagePort objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker)."
    ]
  ],
  "dom-messageport-close": [
    [
      "API/MessagePort/close",
      "MessagePort.close()",
      "The close() method of the MessagePort interface disconnects the port, so it is no longer active. This stops the flow of messages to that port."
    ]
  ],
  "dom-messageport-postmessage": [
    [
      "API/MessagePort/postMessage",
      "MessagePort.postMessage()",
      "The postMessage() method of the MessagePort interface sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts."
    ]
  ],
  "dom-messageport-start": [
    [
      "API/MessagePort/start",
      "MessagePort.start()",
      "The start() method of the MessagePort interface starts the sending of messages queued on the port. This method is only needed when using EventTarget.addEventListener; it is implied when using MessageChannel.onmessage."
    ]
  ],
  "dom-name": [
    [
      "API/Window/name",
      "Window.name",
      "Gets/sets the name of the window."
    ]
  ],
  "dom-navigator": [
    [
      "API/Window/navigator",
      "Window.navigator",
      "The Window.navigator read-only property returns a reference to the Navigator object, which can be queried for information about the application running the script."
    ]
  ],
  "dom-navigator-appcodename": [
    [
      "API/NavigatorID/appCodeName",
      "NavigatorID.appCodeName",
      "The NavigatorID.appCodeName always returns 'Mozilla', on any browser. This property is kept only for compatibility purposes."
    ]
  ],
  "dom-navigator-appname": [
    [
      "API/NavigatorID/appName",
      "NavigatorID.appName",
      "The NavigatorID.appName property returns the name of the browser. The HTML5 specification also allows any browser to return \"Netscape\" here, for compatibility reasons."
    ]
  ],
  "dom-navigator-appversion": [
    [
      "API/NavigatorID/appVersion",
      "NavigatorID.appVersion",
      "Returns the version of the browser as a string. It may be either a plain version number, like \"5.0\", or a version number followed by more detailed information. The HTML5 specification also allows any browser to return \"4.0\", for compatibility reasons."
    ]
  ],
  "dom-navigator-canplaytype": [
    [
      "API/HTMLMediaElement/canPlayType",
      "HTMLMediaElement.canPlayType()",
      "The HTMLMediaElement.canPlayType() method determines whether the specified media type can be played back."
    ]
  ],
  "dom-navigator-cookieenabled": [
    [
      "API/Navigator/cookieEnabled",
      "Navigator.cookieEnabled",
      "navigator.cookieEnabled returns a Boolean value that indicates whether cookies are enabled or not."
    ]
  ],
  "dom-navigator-hardwareconcurrency": [
    [
      "API/NavigatorConcurrentHardware/hardwareConcurrency",
      "navigator.hardwareConcurrency",
      "The navigator.hardwareConcurrency read-only property returns the number of logical processors available to run threads on the user's computer."
    ]
  ],
  "dom-navigator-javaenabled": [
    [
      "API/NavigatorPlugins/javaEnabled",
      "NavigatorPlugins.javaEnabled()",
      "This method indicates whether the current browser is Java-enabled or not."
    ]
  ],
  "dom-navigator-language": [
    [
      "API/NavigatorLanguage/language",
      "NavigatorLanguage.language",
      "The NavigatorLanguage.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI."
    ]
  ],
  "dom-navigator-languages": [
    [
      "API/NavigatorLanguage/languages",
      "NavigatorLanguage.languages",
      "The NavigatorLanguage.languages read-only property returns an array of DOMStrings representing the user's preferred languages. The language is described using BCP 47 language tags. In the returned array they are ordered by preference with the most preferred language first."
    ]
  ],
  "dom-navigator-mimetypes": [
    [
      "API/NavigatorPlugins/mimeTypes",
      "NavigatorPlugins.mimeTypes",
      "Returns a MimeTypeArray object, which contains a list of MimeType objects representing the MIME types recognized by the browser."
    ]
  ],
  "dom-navigator-online": [
    [
      "API/NavigatorOnLine/onLine",
      "Navigator.onLine",
      "Returns the online status of the browser. The property returns a boolean value, with true meaning online and false meaning offline. The property sends updates whenever the browser's ability to connect to the network changes. The update occurs when the user follows links or when a script requests a remote page. For example, the property should return false when users click links soon after they lose internet connection."
    ]
  ],
  "dom-navigator-oscpu": [
    [
      "API/Navigator/oscpu",
      "Navigator.oscpu",
      "Returns a string that identifies the current operating system."
    ]
  ],
  "dom-navigator-platform": [
    [
      "API/NavigatorID/platform",
      "NavigatorID.platform",
      "Returns a string representing the platform of the browser. The specification allows browsers to always return the empty string, so don't rely on this property to get a reliable answer."
    ]
  ],
  "dom-navigator-plugins": [
    [
      "API/NavigatorPlugins/plugins",
      "NavigatorPlugins.plugins",
      "Returns a PluginArray object, listing the Plugin objects describing the plugins installed in the application."
    ]
  ],
  "dom-navigator-product": [
    [
      "API/NavigatorID/product",
      "NavigatorID.product",
      "The NavigatorID.product property returns the product name of the current browser."
    ]
  ],
  "dom-navigator-productsub": [
    [
      "API/Navigator/productSub",
      "Navigator.productSub",
      "The Navigator.productSub read-only property returns the build number of the current browser."
    ]
  ],
  "dom-navigator-taintenabled": [
    [
      "API/NavigatorID/taintEnabled",
      "NavigatorID.taintEnabled()",
      "The NavigatorID.taintEnabled() method always returns false."
    ]
  ],
  "dom-navigator-useragent": [
    [
      "API/NavigatorID/userAgent",
      "NavigatorID.userAgent",
      "The NavigatorID.userAgent read-only property returns the user agent string for the current browser."
    ]
  ],
  "dom-navigator-vendor": [
    [
      "API/Navigator/vendor",
      "Navigator.vendor",
      "Returns the name of the browser vendor for the current browser."
    ]
  ],
  "dom-navigator-vendorsub": [
    [
      "API/Navigator/vendorSub",
      "Navigator.vendorSub",
      "The Navigator.vendorSub read-only property is the substring of the vendor having to do with the vendor version number. The specification allows browsers to always return the empty string, so don't rely on this property to get a reliable answer."
    ]
  ],
  "dom-object-typemustmatch": [
    [
      "API/HTMLObjectElement/typeMustMatch",
      "HTMLObjectElement.typeMustMatch",
      "The HTMLObjectElement.typeMustMatch property is a Boolean that reflects the typemustmatch attribute of the <object> element and indicates if the resouce linked by it must match the MIME type given by HTMLObjectElement.type in order for this resource to be used."
    ]
  ],
  "dom-offscreencanvas": [
    [
      "API/OffscreenCanvas/OffscreenCanvas",
      "OffscreenCanvas()",
      "The OffscreenCanvas() constructor returns a newly instantiated OffscreenCanvas object."
    ]
  ],
  "dom-offscreencanvas-getcontext": [
    [
      "API/OffscreenCanvas/getContext",
      "OffscreenCanvas.getContext()",
      "The OffscreenCanvas.getContext() method returns a drawing context for an offscreen canvas, or null if the context identifier is not supported."
    ]
  ],
  "dom-offscreencanvas-height": [
    [
      "API/OffscreenCanvas/height",
      "OffscreenCanvas.height",
      "The height property returns and sets the height of an OffscreenCanvas object."
    ]
  ],
  "dom-offscreencanvas-transfertoimagebitmap": [
    [
      "API/OffscreenCanvas/transferToImageBitmap",
      "OffscreenCanvas.transferToImageBitmap()",
      "The OffscreenCanvas.transferToImageBitmap() method creates an ImageBitmap object from the most recently rendered image of the OffscreenCanvas."
    ]
  ],
  "dom-offscreencanvas-width": [
    [
      "API/OffscreenCanvas/width",
      "OffscreenCanvas.width",
      "The width property returns and sets the width of an OffscreenCanvas object."
    ]
  ],
  "dom-open": [
    [
      "API/Window/open",
      "Window.open()",
      "The Window interface's open() method loads the specified resource into the browsing context (window, <iframe> or tab) with the specified name. If the name doesn't exist, then a new window is opened and the specified resource is loaded into its browsing context."
    ]
  ],
  "dom-origin": [
    [
      "API/WindowOrWorkerGlobalScope/origin",
      "WindowOrWorkerGlobalScope.origin",
      "The origin read-only property of the WindowOrWorkerGlobalScope interface returns the origin of the global scope, serialized as a string."
    ]
  ],
  "dom-pagetransitionevent-persisted": [
    [
      "API/PageTransitionEvent/persisted",
      "PageTransitionEvent.persisted",
      "The persisted read-only property indicates if a webpage is loading from a cache."
    ]
  ],
  "dom-path2d": [
    [
      "API/Path2D",
      "Path2D",
      "The Path2D interface of the Canvas 2D API is used to declare paths that are then later used on CanvasRenderingContext2D objects. The path methods of the CanvasRenderingContext2D interface are present on this interface as well and are allowing you to create paths that you can retain and replay as required on a canvas."
    ],
    [
      "API/Path2D/Path2D",
      "Path2D()",
      "The Path2D() constructor returns a newly instantiated Path2D object, optionally with another path as an argument (creates a copy), or optionally with a string consisting of SVG path data."
    ]
  ],
  "dom-path2d-addpath": [
    [
      "API/Path2D/addPath",
      "Path2D.addPath()",
      "The Path2D.addPath() method of the Canvas 2D API adds to the path the path given by the argument."
    ]
  ],
  "dom-plugin": [
    [
      "API/Plugin",
      "Plugin",
      "The Plugin interface provides information about a browser plugin."
    ]
  ],
  "dom-promiserejectionevent-promise": [
    [
      "API/PromiseRejectionEvent/promise",
      "PromiseRejectionEvent.promise",
      "The PromiseRejectionEvent interface's promise read-only property indicates the JavaScript Promise which was rejected. You can examine the event's PromiseRejectionEvent.reason property to learn why the promise was rejected."
    ]
  ],
  "dom-promiserejectionevent-reason": [
    [
      "API/PromiseRejectionEvent/reason",
      "PromiseRejectionEvent.reason",
      "The read-only PromiseRejection property reason read-only property is any JavaScript value or Object which provides the reason passed into Promise.reject(). This in theory provides information about why the promise was rejected."
    ]
  ],
  "dom-prompt": [
    [
      "API/Window/prompt",
      "Window.prompt()",
      "The Window.prompt() displays a dialog with an optional message prompting the user to input some text."
    ]
  ],
  "dom-radionodelist-value": [
    [
      "API/RadioNodeList/value",
      "RadioNodeList.value",
      "If the underlying element collection contains radio buttons, the RadioNodeList.value property represents the checked radio button. On retrieving the value property, the value of the currently checked radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in checked state, the empty string is returned. On setting the value property, the first radio button input element whose value property is equal to the new value will be set to checked."
    ]
  ],
  "dom-select-add": [
    [
      "API/HTMLSelectElement/add",
      "HTMLSelectElement.add()",
      "The HTMLSelectElement.add() method adds an element to the collection of option elements for this select element."
    ]
  ],
  "dom-select-item": [
    [
      "API/HTMLSelectElement/item",
      "HTMLSelectElement.item()",
      "The HTMLSelectElement.item() method returns the Element corresponding to the HTMLOptionElement whose position in the options list corresponds to the index given in parameter, or null if there are none."
    ]
  ],
  "dom-select-nameditem": [
    [
      "API/HTMLSelectElement/namedItem",
      "HTMLSelectElement.namedItem()",
      "The HTMLSelectElement.namedItem() method returns the HTMLOptionElement corresponding to the HTMLOptionElement whose name or id match the specified name, or null if no option matches."
    ]
  ],
  "dom-select-remove": [
    [
      "API/HTMLSelectElement/remove",
      "HTMLSelectElement.remove()",
      "The HTMLSelectElement.remove() method removes the element at the specified index from the options collection for this select element."
    ]
  ],
  "dom-select-selectedindex": [
    [
      "API/HTMLSelectElement/selectedIndex",
      "HTMLSelectElement.selectedIndex",
      "The HTMLSelectElement.selectedIndex is a long that reflects the index of the first selected <option> element. The value -1 indicates that no element is selected."
    ]
  ],
  "dom-select-selectedoptions": [
    [
      "API/HTMLSelectElement/selectedOptions",
      "HTMLSelectElement.selectedOptions",
      "The read-only HTMLSelectElement property selectedOptions contains a list of the <option> elements contained within the <select> element that are currently selected. The list of selected options is an HTMLCollection object with one entry per currently selected option."
    ]
  ],
  "dom-select-type": [
    [
      "API/HTMLSelectElement/type",
      "HTMLSelectElement.type",
      "The HTMLSelectElement.type read-only property returns the form control's type."
    ]
  ],
  "dom-self": [
    [
      "API/Window/self",
      "Window.self",
      "The Window.self read-only property returns the window itself, as a WindowProxy. It can be used with dot notation on a window object (that is, window.self) or standalone (self). The advantage of the standalone notation is that a similar notation exists for non-window contexts, such as in Web Workers. By using self, you can refer to the global scope in a way that will work not only in a window context (self will resolve to window.self) but also in a worker context (self will then resolve to WorkerGlobalScope.self)."
    ]
  ],
  "dom-sessionstorage": [
    [
      "API/Window/sessionStorage",
      "Window.sessionStorage",
      "The sessionStorage property allows you to access a session Storage object for the current origin. sessionStorage is similar to Window.localStorage; the only difference is while data stored in localStorage has no expiration set, data stored in sessionStorage gets cleared when the page session ends. A page session lasts for as long as the browser is open and survives over page reloads and restores. Opening a page in a new tab or window will cause a new session to be initiated with the value of the top-level browsing context, which differs from how session cookies work."
    ]
  ],
  "dom-setinterval": [
    [
      "API/WindowOrWorkerGlobalScope/setInterval",
      "WindowOrWorkerGlobalScope.setInterval()",
      "The setInterval() method of the WindowOrWorkerGlobalScope mixin repeatedly calls a function or executes a code snippet, with a fixed time delay between each call. It returns an interval ID which uniquely identifies the interval, so you can remove it later by calling clearInterval(). This method is offered on the Window and Worker interfaces."
    ]
  ],
  "dom-settimeout": [
    [
      "API/WindowOrWorkerGlobalScope/setTimeout",
      "WindowOrWorkerGlobalScope.setTimeout()",
      "The setTimeout() method of the WindowOrWorkerGlobalScope mixin (and successor to window.setTimeout) sets a timer which executes a function or specified piece of code once after the timer expires."
    ]
  ],
  "dom-sharedworker": [
    [
      "API/SharedWorker/SharedWorker",
      "SharedWorker()",
      "The SharedWorker() constructor creates a SharedWorker object that executes the script at the specified URL. This script must obey the same-origin policy."
    ]
  ],
  "dom-sharedworker-port": [
    [
      "API/SharedWorker/port",
      "SharedWorker.port",
      "The port property of the SharedWorker interface returns a MessagePort object used to communicate and control the shared worker."
    ]
  ],
  "dom-sharedworkerglobalscope-close": [
    [
      "API/SharedWorkerGlobalScope/close",
      "SharedWorkerGlobalScope.close()",
      "The close() method of the SharedWorkerGlobalScope interface discards any tasks queued in the SharedWorkerGlobalScope's event loop, effectively closing this particular scope."
    ]
  ],
  "dom-sharedworkerglobalscope-name": [
    [
      "API/SharedWorkerGlobalScope/name",
      "SharedWorkerGlobalScope.name",
      "The name read-only property of the SharedWorkerGlobalScope interface returns the name that the SharedWorker was (optionally) given when it was created. This is the name that the SharedWorker() constructor can pass to get a reference to the SharedWorkerGlobalScope."
    ]
  ],
  "dom-slot-assignednodes": [
    [
      "API/HTMLSlotElement/assignedNodes",
      "HTMLSlotElement.assignedNodes()",
      "The assignedNodes() property of the HTMLSlotElement interface returns the sequence of elements assigned to this slot or, alternatively, the slot's fallback content."
    ]
  ],
  "dom-slot-name": [
    [
      "API/HTMLSlotElement/name",
      "HTMLSlotElement.name",
      "The name property of the HTMLSlotElement interface returns or sets the slot name. A slot is a placeholder inside a web component that users can fill with their own markup."
    ]
  ],
  "dom-storage-clear": [
    [
      "API/Storage/clear",
      "Storage.clear()",
      "The clear() method of the Storage interface, when invoked, clears all stored keys."
    ]
  ],
  "dom-storage-getitem": [
    [
      "API/Storage/getItem",
      "localStorage.getItem()",
      "The getItem() method of the Storage interface, when passed a key name, will return that key's value or null if the key does not exist."
    ]
  ],
  "dom-storage-key": [
    [
      "API/Storage/key",
      "Storage.key()",
      "The key() method of the Storage interface, when passed a number n, returns the name of the nth key in the storage. The order of keys is user-agent defined, so you should not rely on it."
    ]
  ],
  "dom-storage-length": [
    [
      "API/Storage/length",
      "Storage.length",
      "The length read-only property of the Storage interface returns an integer representing the number of data items stored in the Storage object."
    ]
  ],
  "dom-storage-removeitem": [
    [
      "API/Storage/removeItem",
      "Storage.removeItem()",
      "The removeItem() method of the Storage interface, when passed a key name, will remove that key from the storage if it exists. If there is no item associated with the given key, this method will do nothing."
    ]
  ],
  "dom-storage-setitem": [
    [
      "API/Storage/setItem",
      "Storage.setItem()",
      "The setItem() method of the Storage interface, when passed a key name and value, will add that key to the storage, or update that key's value if it already exists."
    ]
  ],
  "dom-tabindex": [
    [
      "API/HTMLElement/tabIndex",
      "HTMLElement.tabIndex",
      "The HTMLElement.tabIndex property represents the tab order of the current element."
    ]
  ],
  "dom-table-caption": [
    [
      "API/HTMLTableElement/caption",
      "HTMLTableElement.caption",
      "The HTMLTableElement.caption property represents the table caption. If no caption element is associated with the table, it can be null."
    ]
  ],
  "dom-table-insertrow": [
    [
      "API/HTMLTableElement/insertRow",
      "HTMLTableElement.insertRow()",
      "The HTMLTableElement.insertRow() method inserts a new row in the table and returns a reference to the new row."
    ]
  ],
  "dom-table-tfoot": [
    [
      "API/HTMLTableElement/tFoot",
      "HTMLTableElement.tFoot",
      "The HTMLTableElement.tFoot property represents the table's <tfoot> element. Its value can be null if there is no such element."
    ]
  ],
  "dom-table-thead": [
    [
      "API/HTMLTableElement/tHead",
      "HTMLTableElement.tHead",
      "The HTMLTableElement.tHead represents  the table's <thead> element. Its value can be null if there is no such element."
    ]
  ],
  "dom-template-content": [
    [
      "API/HTMLTemplateElement/content",
      "HTMLTemplateElement.content",
      "The HTMLTemplateElement.content property returns a <template> element's template contents (a DocumentFragment)."
    ]
  ],
  "dom-textarea/input-select": [
    [
      "API/HTMLInputElement/select",
      "HTMLInputElement.select()",
      "The HTMLInputElement.select() method selects all the text in a <textarea> element or an <input> element with a text field."
    ]
  ],
  "dom-textarea/input-setselectionrange": [
    [
      "API/HTMLInputElement/setSelectionRange",
      "HTMLInputElement.setSelectionRange()",
      "The HTMLInputElement.setSelectionRange() method sets the start and end positions of the current text selection in an <input> element."
    ]
  ],
  "dom-textmetrics-width": [
    [
      "API/TextMetrics/width",
      "TextMetrics.width",
      "The readonly TextMetrics.width property contains the text's advance width (the width of that inline box) in CSS pixels."
    ]
  ],
  "dom-time-datetime": [
    [
      "API/HTMLTimeElement/dateTime",
      "HTMLTimeElement.dateTime",
      "The HTMLTimeElement.dateTime property is a DOMString that reflects the datetime HTML attribute, containing a machine-readable form of the element's date and time value."
    ]
  ],
  "dom-timeranges-end": [
    [
      "API/TimeRanges/end",
      "TimeRanges.end()",
      "Returns the time offset at which a specified time range ends."
    ]
  ],
  "dom-timeranges-length": [
    [
      "API/TimeRanges/length",
      "TimeRanges.length",
      "The TimeRanges.length read-only property returns the number of ranges in the object."
    ]
  ],
  "dom-timeranges-start": [
    [
      "API/TimeRanges/start",
      "TimeRanges.start()",
      "Returns the time offset at which a specified time range begins."
    ]
  ],
  "dom-title": [
    [
      "API/HTMLElement/title",
      "HTMLElement.title",
      "The HTMLElement.title property represents the title of the element, the text usually displayed in a 'tool tip' popup when the mouse is over the displayed node."
    ]
  ],
  "dom-top": [
    [
      "API/Window/top",
      "Window.top",
      "Returns a reference to the topmost window in the window hierarchy."
    ]
  ],
  "dom-tr-insertcell": [
    [
      "API/HTMLTableRowElement/insertCell",
      "HTMLTableRowElement.insertCell()",
      "The HTMLTableRowElement.insertCell() method inserts a new cell into a table row and returns a reference to the cell."
    ]
  ],
  "dom-track-src": [
    [
      "API/HTMLTrackElement/src",
      "HTMLTrackElement.src",
      "The HTMLTrackElement.src property reflects the value of the <track> element's src attribute, which indicates the URL of the text track's data."
    ]
  ],
  "dom-validitystate-badinput": [
    [
      "API/ValidityState/badInput",
      "ValidityState.badInput",
      "The read-only property ValidityState.badInput indicates if the user has provided input that the browser is unable to convert. For example, if you have a number input element whose content is a string. Note: While this is unsupported in Internet Explorer, any non-numeric value will be dismissed from the field if it is a number input."
    ]
  ],
  "dom-validitystate-toolong": [
    [
      "API/ValidityState/tooLong",
      "ValidityState.tooLong",
      "The read-only property ValidityState.tooLong indicates if the value of an <input> or <textarea>, after having been edited by the user, exceeds the maximum code-unit length established by the element's maxlength attribute."
    ]
  ],
  "dom-videotrack-id": [
    [
      "API/VideoTrack/id",
      "VideoTrack.id",
      "The id property contains a string which uniquely identifies the track represented by the VideoTrack."
    ]
  ],
  "dom-videotrack-kind": [
    [
      "API/VideoTrack/kind",
      "VideoTrack.kind",
      "The kind property contains a string indicating the category of video contained in the VideoTrack."
    ]
  ],
  "dom-videotrack-label": [
    [
      "API/VideoTrack/label",
      "VideoTrack.label",
      "The read-only VideoTrack property label returns a string specifying the video track's human-readable label, if one is available; otherwise, it returns an empty string."
    ]
  ],
  "dom-videotrack-language": [
    [
      "API/VideoTrack/language",
      "Videotrack.language",
      "The read-only VideoTrack property language returns a string identifying the language used in the video track."
    ]
  ],
  "dom-videotrack-selected": [
    [
      "API/VideoTrack/selected",
      "VideoTrack.selected",
      "The VideoTrack property selected controls whether or not a particular video track is active."
    ]
  ],
  "dom-videotracklist-gettrackbyid": [
    [
      "API/VideoTrackList/getTrackById",
      "getTrackById",
      "The VideoTrackList method getTrackById() returns the first VideoTrack object from the track list whose id matches the specified string."
    ]
  ],
  "dom-videotracklist-length": [
    [
      "API/VideoTrackList/length",
      "VideoTrackList.length",
      "The read-only VideoTrackList property length returns the number of entries in the VideoTrackList, each of which is a VideoTrack representing one video track in the media element."
    ]
  ],
  "dom-videotracklist-selectedindex": [
    [
      "API/VideoTrackList/selectedIndex",
      "VideoTrackList.selectedIndex",
      "The read-only VideoTrackList property selectedIndex returns the index of the currently selected track, if any, or -1 otherwise."
    ]
  ],
  "dom-websocket": [
    [
      "API/WebSocket/WebSocket",
      "WebSocket()",
      "The WebSocket() constructor returns a new WebSocket object."
    ]
  ],
  "dom-websocket-binarytype": [
    [
      "API/WebSocket/binaryType",
      "WebSocket.binaryType",
      "The WebSocket.binaryType property returns the type of binary data being transmitted by the connection."
    ]
  ],
  "dom-websocket-bufferedamount": [
    [
      "API/WebSocket/bufferedAmount",
      "WebSocket.bufferedAmount",
      "The WebSocket.bufferedAmount read-only property returns the number of bytes of data that have been queued using calls to send() but not yet transmitted to the network. This value resets to zero once all queued data has been sent. This value does not reset to zero when the connection is closed; if you keep calling send(), this will continue to climb."
    ]
  ],
  "dom-websocket-close": [
    [
      "API/WebSocket/close",
      "WebSocket.close()",
      "The WebSocket.close() method closes the WebSocket connection or connection attempt, if any. If the connection is already CLOSED, this method does nothing."
    ]
  ],
  "dom-websocket-extensions": [
    [
      "API/WebSocket/extensions",
      "WebSocket.extensions",
      "The WebSocket.extensions read-only property returns the extensions selected by the server. This is currently only the empty string or a list of extensions as negotiated by the connection."
    ]
  ],
  "dom-websocket-protocol": [
    [
      "API/WebSocket/protocol",
      "WebSocket.protocol",
      "The WebSocket.protocol read-only property returns the name of the sub-protocol the server selected; this will be one of the strings specified in the protocols parameter when creating the WebSocket object."
    ]
  ],
  "dom-websocket-readystate": [
    [
      "API/WebSocket/readyState",
      "WebSocket.readyState",
      "The WebSocket.readyState read-only property returns the current state of the WebSocket connection."
    ]
  ],
  "dom-websocket-send": [
    [
      "API/WebSocket/send",
      "WebSocket.send()",
      "The WebSocket.send() method enqueues the specified data to be transmitted to the server over the WebSocket connection, increasing the value of bufferedAmount by the number of bytes needed to contain the data. If the data can't be sent (for example, because it needs to be buffered but the buffer is full), the socket is closed automatically."
    ]
  ],
  "dom-websocket-url": [
    [
      "API/WebSocket/url",
      "WebSocket.url",
      "The WebSocket.url read-only property returns the absolute URL of the WebSocket as resolved by the constructor."
    ]
  ],
  "dom-window": [
    [
      "API/Window/window",
      "Window.window",
      "The window property of a window object points to the window object itself."
    ]
  ],
  "dom-window-blur": [
    [
      "API/Window/blur",
      "Window.blur()",
      "Shifts focus away from the window."
    ]
  ],
  "dom-window-close": [
    [
      "API/Window/close",
      "Window.close()",
      "The Window.close() method closes the current window, or the window on which it was called."
    ]
  ],
  "dom-window-customelements": [
    [
      "API/Window/customElements",
      "Window.customElements",
      "The customElements read-only property of the Window interface returns a reference to the CustomElementRegistry object, which can be used to register new custom elements and get information about previously registered custom elements."
    ]
  ],
  "dom-window-focus": [
    [
      "API/Window/focus",
      "Window.focus()",
      "Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns."
    ]
  ],
  "dom-window-locationbar": [
    [
      "API/Window/locationbar",
      "Window.locationbar",
      "Returns the locationbar object, whose visibility can be checked."
    ]
  ],
  "dom-window-menubar": [
    [
      "API/Window/menubar",
      "Window.menubar",
      "Returns the menubar object, whose visibility can be checked."
    ]
  ],
  "dom-window-personalbar": [
    [
      "API/Window/personalbar",
      "Window.personalbar",
      "Returns the personalbar object, whose visibility can be toggled in the window."
    ]
  ],
  "dom-window-postmessage": [
    [
      "API/Window/postMessage",
      "Window.postMessage()",
      "The window.postMessage() method safely enables cross-origin communication between Window objects; e.g., between a page and a pop-up that it spawned, or between a page and an iframe embedded within it."
    ]
  ],
  "dom-window-scrollbars": [
    [
      "API/Window/scrollbars",
      "Window.scrollbars",
      "Returns the scrollbars object, whose visibility can be checked."
    ]
  ],
  "dom-window-statusbar": [
    [
      "API/Window/statusbar",
      "Window.statusbar",
      "Returns the statusbar object, whose visibility can be toggled in the window."
    ]
  ],
  "dom-window-stop": [
    [
      "API/Window/stop",
      "Window.stop()",
      "This method stops window loading."
    ]
  ],
  "dom-window-toolbar": [
    [
      "API/Window/toolbar",
      "Window.toolbar",
      "Returns the toolbar object, whose visibility can be toggled in the window."
    ]
  ],
  "dom-worker": [
    [
      "API/Worker/Worker",
      "Worker()",
      "The Worker() constructor creates a Worker object that executes the script at the specified URL. This script must obey the same-origin policy."
    ]
  ],
  "dom-worker-navigator": [
    [
      "API/WorkerGlobalScope/navigator",
      "WorkerGlobalScope.navigator",
      "The navigator read-only property of the WorkerGlobalScope interface returns the WorkerNavigator associated with the worker. It is a specific navigator object, mostly a subset of the Navigator for browsing scopes, but adapted to workers."
    ]
  ],
  "dom-worker-postmessage": [
    [
      "API/Worker/postMessage",
      "Worker.postMessage()",
      "The postMessage() method of the Worker interface sends a message to the worker's inner scope. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references."
    ]
  ],
  "dom-worker-terminate": [
    [
      "API/Worker/terminate",
      "Worker.terminate()",
      "The terminate() method of the Worker interface immediately terminates the Worker. This does not offer the worker an opportunity to finish its operations; it is simply stopped at once."
    ]
  ],
  "dom-workerglobalscope-importscripts": [
    [
      "API/WorkerGlobalScope/importScripts",
      "WorkerGlobalScope.importScripts()",
      "The importScripts() method of the WorkerGlobalScope interface synchronously imports one or more scripts into the worker's scope."
    ]
  ],
  "dom-workerglobalscope-location": [
    [
      "API/WorkerGlobalScope/location",
      "WorkerGlobalScope.location",
      "The location read-only property of the WorkerGlobalScope interface returns the WorkerLocation associated with the worker. It is a specific location object, mostly a subset of the Location for browsing scopes, but adapted to workers."
    ]
  ],
  "dom-workerglobalscope-self": [
    [
      "API/WorkerGlobalScope/self",
      "WorkerGlobalScope.self",
      "The self read-only property of the WorkerGlobalScope interface returns a reference to the WorkerGlobalScope itself. Most of the time it is a specific scope like DedicatedWorkerGlobalScope,  SharedWorkerGlobalScope, or ServiceWorkerGlobalScope."
    ]
  ],
  "dragevent": [
    [
      "API/DragEvent",
      "DragEvent",
      "The DragEvent interface is a DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way."
    ]
  ],
  "e-mail-state-(type=email)": [
    [
      "HTML/Element/input/email",
      "<input type=\"email\">",
      "<input> elements of type \"email\" are used to let the user enter and edit an email address, or, if the multiple attribute is specified, a list of email addresses. The input value is automatically validated to ensure that it's either empty or a properly-formatted email address (or list of addresses) before the form can be submitted."
    ]
  ],
  "embedding-custom-non-visible-data-with-the-data-*-attributes": [
    [
      "HTML/Global_attributes/data-*",
      "data-*",
      "The data-* global attributes form a class of attributes called custom data attributes, that allow proprietary information to be exchanged between the HTML and its DOM representation by scripts."
    ]
  ],
  "event-handler-attributes": [
    [
      "Guide/Events/Event_handlers",
      "DOM on-event handlers",
      "The Web platform provides several ways to get notified of DOM events.  Two common styles are: the generalized addEventListener() and a set of specific on-event handlers."
    ]
  ],
  "fakepath-srsly": [
    [
      "HTML/Element/input",
      "<input>",
      "The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent."
    ]
  ],
  "file-upload-state-(type=file)": [
    [
      "HTML/Element/input/file",
      "<input type=\"file\">",
      "<input> elements with type=\"file\" let the user choose one or more files from their device storage. Once chosen, the files can be uploaded to a server using form submission, or manipulated using JavaScript code and the File API."
    ]
  ],
  "filters": [
    [
      "API/CanvasRenderingContext2D/filter",
      "CanvasRenderingContext2D.filter",
      "The CanvasRenderingContext2D.filter property of the Canvas 2D API provides filter effects like blurring or gray-scaling. It is similar to the CSS filter property and accepts the same functions."
    ]
  ],
  "global-attributes": [
    [
      "HTML/Global_attributes",
      "Global attributes",
      "Global attributes are attributes common to all HTML elements; they can be used on all elements, though they may have no effect on some elements."
    ]
  ],
  "globaleventhandlers": [
    [
      "API/GlobalEventHandlers",
      "GlobalEventHandlers",
      "The GlobalEventHandlers mixin describes the event handlers common to several interfaces like HTMLElement, Document, or Window."
    ]
  ],
  "handler-abstractworker-onerror": [
    [
      "API/AbstractWorker/onerror",
      "AbstractWorker.onerror",
      "The AbstractWorker.onerror property of the AbstractWorker interface represents an EventHandler, that is a function to be called when the error event occurs and bubbles through the Worker."
    ]
  ],
  "handler-broadcastchannel-onmessage": [
    [
      "API/Broadcastchannel/onmessage",
      "BroadcastChannel.onmessage",
      "The BroadcastChannel.onmessage event handler is a property that specifies the function to execute when a message event, of type MessageEvent, is received by this BroadcastChannel. Such an event is sent by the browser with a message broadcasted to the channel."
    ]
  ],
  "handler-broadcastchannel-onmessageerror": [
    [
      "API/Broadcastchannel/onmessageerror",
      "BroadcastChannel.onmessageerror",
      "The onmessageerror event handler of the BroadcastChannel interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the BroadcastChannel instance — that is, when it receives a message that cannot be deserialized."
    ]
  ],
  "handler-dedicatedworkerglobalscope-onmessage": [
    [
      "API/DedicatedWorkerGlobalScope/onmessage",
      "DedicatedWorkerGlobalScope.onmessage",
      "The onmessage property of the DedicatedWorkerGlobalScope interface represents an EventHandler to be called when the message event occurs and bubbles through the Worker — i.e. when a message is sent to the worker using the Worker.postMessage method."
    ]
  ],
  "handler-dedicatedworkerglobalscope-onmessageerror": [
    [
      "API/DedicatedWorkerGlobalScope/onmessageerror",
      "DedicatedWorkerGlobalScope.onmessageerror",
      "The onmessageerror event handler of the DedicatedWorkerGlobalScope interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the worker—that is, when it receives a message that cannot be deserialized."
    ]
  ],
  "handler-eventsource-onerror": [
    [
      "API/EventSource/onerror",
      "EventSource.onerror",
      "The onerror property of the EventSource interface is an EventHandler called when an error occurs and the error event is dispatched on an EventSource object."
    ]
  ],
  "handler-eventsource-onmessage": [
    [
      "API/EventSource/onmessage",
      "EventSource.onmessage",
      "The onmessage property of the EventSource interface is an EventHandler called when a message event is received, that is when a message is coming from the source."
    ]
  ],
  "handler-eventsource-onopen": [
    [
      "API/EventSource/onopen",
      "EventSource.onopen",
      "The onopen property of the EventSource interface is an EventHandler called when an open event is received, that is when the connection was just opened."
    ]
  ],
  "handler-messageport-onmessage": [
    [
      "API/MessagePort/onmessage",
      "MessagePort.onmessage",
      "The onmessage event handler of the MessagePort interface is an EventListener, called whenever an MessageEvent of type message is fired on the port — that is, when the port receives a message."
    ]
  ],
  "handler-messageport-onmessageerror": [
    [
      "API/MessagePort/onmessageerror",
      "MessagePort.onmessageerror",
      "The onmessageerror event handler of the MessagePort interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the port—that is, when it receives a message that cannot be deserialized."
    ]
  ],
  "handler-onabort": [
    [
      "API/GlobalEventHandlers/onabort",
      "GlobalEventHandlers.onabort",
      "An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari)."
    ]
  ],
  "handler-onblur": [
    [
      "API/GlobalEventHandlers/onblur",
      "GlobalEventHandlers.onblur",
      "The onblur property indicates the object's event handler for the blur event. It's available on Element, Document, and Window."
    ]
  ],
  "handler-oncancel": [
    [
      "API/GlobalEventHandlers/oncancel",
      "GlobalEventHandlers.oncancel",
      "The oncancel property returns the onCancel event handler code on the current element."
    ]
  ],
  "handler-oncanplay": [
    [
      "API/GlobalEventHandlers/oncanplay",
      "GlobalEventHandlers.oncanplay",
      "The oncanplay property sets and returns the event handler for the canplay event."
    ]
  ],
  "handler-oncanplaythrough": [
    [
      "API/GlobalEventHandlers/oncanplaythrough",
      "GlobalEventHandlers.oncanplaythrough",
      "The oncanplaythrough property sets and returns the event handler for the canplaythrough event."
    ]
  ],
  "handler-onchange": [
    [
      "API/GlobalEventHandlers/onchange",
      "GlobalEventHandlers.onchange",
      "The onchange property sets and returns the event handler for the change event."
    ]
  ],
  "handler-onclick": [
    [
      "API/GlobalEventHandlers/onclick",
      "GlobalEventHandlers.onclick",
      "The onclick property returns the click event handler code on the current element."
    ]
  ],
  "handler-onclose": [
    [
      "API/GlobalEventHandlers/onclose",
      "GlobalEventHandlers.onclose",
      "An event handler for close events sent to the window. (Not available with Firefox 2 or Safari)"
    ]
  ],
  "handler-oncontextmenu": [
    [
      "API/GlobalEventHandlers/oncontextmenu",
      "GlobalEventHandlers.oncontextmenu",
      "An event handler property for right-click events on the window. Unless the default behavior is prevented, the browser context menu will activate"
    ]
  ],
  "handler-oncuechange": [
    [
      "API/GlobalEventHandlers/oncuechange",
      "GlobalEventHandlers.oncuechange",
      "The oncuechange property sets and returns the event handler for the cuechange event."
    ]
  ],
  "handler-ondblclick": [
    [
      "API/GlobalEventHandlers/ondblclick",
      "GlobalEventHandlers.ondblclick",
      "The ondblclick property returns the onDblClick event handler code on the current element."
    ]
  ],
  "handler-ondurationchange": [
    [
      "API/GlobalEventHandlers/ondurationchange",
      "GlobalEventHandlers.ondurationchange",
      "The ondurationchange property sets and returns the event handler for the durationchange event."
    ]
  ],
  "handler-onemptied": [
    [
      "API/GlobalEventHandlers/onemptied",
      "GlobalEventHandlers.onemptied",
      "The onemptied property sets and returns the event handler for the emptied event."
    ]
  ],
  "handler-onended": [
    [
      "API/GlobalEventHandlers/onended",
      "GlobalEventHandlers.onended",
      "The onended property sets and returns the event handler for the ended event."
    ]
  ],
  "handler-onerror": [
    [
      "API/GlobalEventHandlers/onerror",
      "GlobalEventHandlers.onerror",
      "An event handler for the error event."
    ],
    [
      "API/HTMLMediaElement/onerror",
      "HTMLMediaElement.onerror",
      "The onerror property of the HTMLMediaElement interface specifies an event listener function which will receive error events sent to the media element. These events occur when some form of error occurs while attempting to load or perform the media."
    ]
  ],
  "handler-onfocus": [
    [
      "API/GlobalEventHandlers/onfocus",
      "GlobalEventHandlers.onfocus",
      "The onfocus property returns the onFocus event handler code on the current element."
    ]
  ],
  "handler-oninvalid": [
    [
      "API/GlobalEventHandlers/oninvalid",
      "GlobalEventHandlers.oninvalid",
      "The oninvalid property sets and returns the event handler for the invalid event."
    ]
  ],
  "handler-onkeydown": [
    [
      "API/GlobalEventHandlers/onkeydown",
      "GlobalEventHandlers.onkeydown",
      "The onkeydown property returns the onKeyDown event handler code on the current element."
    ]
  ],
  "handler-onkeypress": [
    [
      "API/GlobalEventHandlers/onkeypress",
      "GlobalEventHandlers.onkeypress",
      "The onkeypress property sets and returns the onKeyPress event handler code for the current element."
    ]
  ],
  "handler-onkeyup": [
    [
      "API/GlobalEventHandlers/onkeyup",
      "GlobalEventHandlers.onkeyup",
      "The onkeyup property returns the onKeyUp event handler code for the current element."
    ]
  ],
  "handler-onload": [
    [
      "API/GlobalEventHandlers/onload",
      "GlobalEventHandlers.onload",
      "The onload property of the GlobalEventHandlers mixin is an event handler for the load event of a Window, XMLHttpRequest, <img> element, etc., which fires when the resource has loaded."
    ]
  ],
  "handler-onloadeddata": [
    [
      "API/GlobalEventHandlers/onloadeddata",
      "GlobalEventHandlers.onloadeddata",
      "The onloadeddata property sets and returns the event handler for the loadeddata event."
    ]
  ],
  "handler-onloadedmetadata": [
    [
      "API/GlobalEventHandlers/onloadedmetadata",
      "GlobalEventHandlers.onloadedmetadata",
      "The onloadedmetadata property sets and returns the event handler for the loadedmetadata event."
    ]
  ],
  "handler-onloadend": [
    [
      "API/GlobalEventHandlers/onloadend",
      "GlobalEventHandlers.onloadend",
      "The onloadend property of the GlobalEventHandlers mixin is an EventHandler representing the code to be called when the loadend event is raised (when progress has stopped on the loading of a resource.)"
    ]
  ],
  "handler-onloadstart": [
    [
      "API/GlobalEventHandlers/onloadstart",
      "GlobalEventHandlers.onloadstart",
      "The onloadstart property of the GlobalEventHandlers mixin is an EventHandler representing the code to be called when the loadstart event is raised (when progress has begun on the loading of a resource.)"
    ]
  ],
  "handler-onmousedown": [
    [
      "API/GlobalEventHandlers/onmousedown",
      "GlobalEventHandlers.onmousedown",
      "The onmousedown property returns the onmousedown event handler code on the current element."
    ]
  ],
  "handler-onmouseenter": [
    [
      "API/GlobalEventHandlers/onmouseenter",
      "GlobalEventHandlers.onmouseenter",
      "The onmouseenter property sets and returns the event handler for the mouseenter event."
    ]
  ],
  "handler-onmouseleave": [
    [
      "API/GlobalEventHandlers/onmouseleave",
      "GlobalEventHandlers.onmouseleave",
      "The onmouseleave property sets and returns the event handler for the mouseleave event."
    ]
  ],
  "handler-onmousemove": [
    [
      "API/GlobalEventHandlers/onmousemove",
      "GlobalEventHandlers.onmousemove",
      "The onmousemove property returns the mousemove event handler code on the current element."
    ]
  ],
  "handler-onmouseout": [
    [
      "API/GlobalEventHandlers/onmouseout",
      "GlobalEventHandlers.onmouseout",
      "The onmouseout property returns the onMouseOut event handler code on the current element."
    ]
  ],
  "handler-onmouseover": [
    [
      "API/GlobalEventHandlers/onmouseover",
      "GlobalEventHandlers.onmouseover",
      "The onmouseover property returns the onMouseOver event handler code on the current element."
    ]
  ],
  "handler-onmouseup": [
    [
      "API/GlobalEventHandlers/onmouseup",
      "GlobalEventHandlers.onmouseup",
      "The onmouseup property returns the onMouseUp event handler code on the current element."
    ]
  ],
  "handler-onpause": [
    [
      "API/GlobalEventHandlers/onpause",
      "GlobalEventHandlers.onpause",
      "The onpause property sets and returns the event handler for the pause event."
    ]
  ],
  "handler-onplay": [
    [
      "API/GlobalEventHandlers/onplay",
      "GlobalEventHandlers.onplay",
      "The GlobalEventHandlers.onplay property sets and returns the event handler for the play event that is fired when playback has begun."
    ]
  ],
  "handler-onreset": [
    [
      "API/GlobalEventHandlers/onreset",
      "GlobalEventHandlers.onreset",
      "The GlobalEventHandlers.onreset property contains an EventHandler triggered when a reset event is received."
    ]
  ],
  "handler-onresize": [
    [
      "API/GlobalEventHandlers/onresize",
      "GlobalEventHandlers.onresize",
      "The GlobalEventHandlers.onresize property contains an EventHandler triggered when a resize event is received."
    ]
  ],
  "handler-onscroll": [
    [
      "API/GlobalEventHandlers/onscroll",
      "GlobalEventHandlers.onscroll",
      "An event handler for scroll events on element."
    ]
  ],
  "handler-onselect": [
    [
      "API/GlobalEventHandlers/onselect",
      "GlobalEventHandlers.onselect",
      "An event handler for the select event on the window."
    ]
  ],
  "handler-onsubmit": [
    [
      "API/GlobalEventHandlers/onsubmit",
      "GlobalEventHandlers.onsubmit",
      "An event handler for the submit event on the window."
    ]
  ],
  "handler-onwheel": [
    [
      "API/GlobalEventHandlers/onwheel",
      "GlobalEventHandlers.onwheel",
      "The onwheel property returns the onwheel event handler code on the current element."
    ]
  ],
  "handler-sharedworkerglobalscope-onconnect": [
    [
      "API/SharedWorkerGlobalScope/onconnect",
      "SharedWorkerGlobalScope.onconnect",
      "The onconnect property of the SharedWorkerGlobalScope interface is an EventHandler representing the code to be called when the connect event is raised — that is, when a MessagePort connection is opened between the associated SharedWorker and the main thread."
    ]
  ],
  "handler-tracklist-onaddtrack": [
    [
      "API/AudioTrackList/onaddtrack",
      "AudioTrackList.onaddtrack",
      "The AudioTrackList property onaddtrack is an event handler which is called when the addtrack event occurs, indicating that a new audio track has been added to the media element whose audio tracks the AudioTrackList represents."
    ],
    [
      "API/VideoTrackList/onaddtrack",
      "VideoTrackList.onaddtrack",
      "The VideoTrackList property onaddtrack is an event handler which is called when the addtrack event occurs, indicating that a new video track has been added to the media element whose video tracks the VideoTrackList represents."
    ]
  ],
  "handler-tracklist-onchange": [
    [
      "API/AudioTrackList/onchange",
      "AudioTrackList.onchange",
      "The AudioTrackList property onchange is an event handler which is called when the change event occurs, indicating that one or more of the AudioTracks in the AudioTrackList have been enabled or disabled."
    ],
    [
      "API/VideoTrackList/onchange",
      "VideoTrackList.onchange",
      "The VideoTrackList property onchange is an event handler which is called when the change event occurs, indicating that a VideoTrack in the VideoTrackList has been made active."
    ]
  ],
  "handler-tracklist-onremovetrack": [
    [
      "API/AudioTrackList/onremovetrack",
      "AudioTrackList.onremovetrack",
      "The AudioTrackList onremovetrack event handler is called when the removetrack event occurs, indicating that an audio track has been removed from the media element, and therefore also from the AudioTrackList."
    ],
    [
      "API/VideoTrackList/onremovetrack",
      "VideoTrackList.onremovetrack",
      "The VideoTrackList onremovetrack event handler is called when the removetrack event occurs, indicating that a video track has been removed from the media element, and therefore also from the VideoTrackList."
    ]
  ],
  "handler-websocket-onclose": [
    [
      "API/WebSocket/onclose",
      "WebSocket.onclose",
      "The WebSocket.onclose property returns the event listener to be called when the WebSocket connection's readyState changes to CLOSED. The listener receives a CloseEvent named \"close\"."
    ]
  ],
  "handler-websocket-onerror": [
    [
      "API/WebSocket/onerror",
      "WebSocket.onerror",
      "The WebSocket.onerror property returns the event listener to be called when an error occurs. This is a simple event named \"error\"."
    ]
  ],
  "handler-websocket-onmessage": [
    [
      "API/WebSocket/onmessage",
      "WebSocket.onmessage",
      "The WebSocket.onmessage property returns the event listener to be called when a message is received from the server. The listener receives a MessageEvent named \"message\"."
    ]
  ],
  "handler-websocket-onopen": [
    [
      "API/WebSocket/onopen",
      "WebSocket.onopen",
      "The WebSocket.onopen property returns the event listener to be called when the WebSocket connection's readyState changes to OPEN; this indicates that the connection is ready to send and receive data. The event is a simple one with the name \"open\"."
    ]
  ],
  "handler-window-onafterprint": [
    [
      "API/WindowEventHandlers/onafterprint",
      "WindowEventHandlers.onafterprint",
      "The WindowEventHandlers.onafterprint property sets and returns the afterprint EventHandler for the current window."
    ]
  ],
  "handler-window-onbeforeprint": [
    [
      "API/WindowEventHandlers/onbeforeprint",
      "WindowEventHandlers.onbeforeprint",
      "The property onbeforeprint sets and returns the onbeforeprint event handler code for the current window."
    ]
  ],
  "handler-window-onbeforeunload": [
    [
      "API/WindowEventHandlers/onbeforeunload",
      "WindowEventHandlers.onbeforeunload",
      "The WindowEventHandlers.onbeforeunload event handler property contains the code executed when the beforeunload is sent. This event fires when a window is about to unload its resources. The document is still visible and the event is still cancelable."
    ]
  ],
  "handler-window-onhashchange": [
    [
      "API/WindowEventHandlers/onhashchange",
      "WindowEventHandlers.onhashchange",
      "The hashchange event fires when a window's hash changes (see location.hash)."
    ]
  ],
  "handler-window-onmessage": [
    [
      "API/WindowEventHandlers/onmessage",
      "onmessage",
      "The onmessage property of the WindowEventHandlers is the EventHandler called whenever an object receives a message event."
    ]
  ],
  "handler-window-onmessageerror": [
    [
      "API/WindowEventHandlers/onmessageerror",
      "WindowEventHandlers.onmessageerror",
      "The onmessageerror event handler of the WindowEventHandlers interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on a window—that is, when it receives a message that cannot be deserialized."
    ]
  ],
  "handler-window-onrejectionhandled": [
    [
      "API/WindowEventHandlers/onrejectionhandled",
      "WindowEventHandlers.onrejectionhandled",
      "The Window.onrejectionhandled property is an event handler for processing rejectionhandled events, which are raised when Promises are rejected."
    ]
  ],
  "handler-window-onstorage": [
    [
      "API/WindowEventHandlers/onstorage",
      "WindowEventHandlers.onstorage",
      "The WindowEventHandlers.onstorage property contains an event handler that runs when the storage event fires. This occurs when a storage area is changed (e.g. a new item is stored.)"
    ]
  ],
  "handler-window-onunhandledrejection": [
    [
      "API/WindowEventHandlers/onunhandledrejection",
      "WindowEventHandlers.onunhandledrejection",
      "The Window.onunhandledrejection property is an event handler for processing unhandledrejection events, which are raised for unhandled Promise rejections."
    ]
  ],
  "handler-window-onunload": [
    [
      "API/WindowEventHandlers/onunload",
      "WindowEventHandlers.onunload",
      "The unload event is raised when the window is unloading its content and resources. The resources removal is processed after the unload event occurs."
    ]
  ],
  "handler-worker-onmessage": [
    [
      "API/Worker/onmessage",
      "Worker.onmessage",
      "The onmessage property of the Worker interface represents an EventHandler, that is a function to be called when the message event occurs. These events are of type MessageEvent and will be called when the worker's parent receives a message (i.e. from the DedicatedWorkerGlobalScope.postMessage method."
    ]
  ],
  "handler-worker-onmessageerror": [
    [
      "API/Worker/onmessageerror",
      "Worker.onmessageerror",
      "The onmessageerror event handler of the Worker interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the Worker instance — that is, when it receives a message that cannot be deserialized."
    ]
  ],
  "handler-workerglobalscope-onerror": [
    [
      "API/WorkerGlobalScope/onerror",
      "WorkerGlobalScope.onerror",
      "The onerror property of the WorkerGlobalScope interface represents an EventHandler to be called when the error event occurs and bubbles through the Worker."
    ]
  ],
  "handler-workerglobalscope-onlanguagechange": [
    [
      "API/WindowEventHandlers/onlanguagechange",
      "WindowEventHandlers.onlanguagechange",
      "The WindowEventHandlers.onlanguagechange event handler is a property containing the code to execute when the languagechange event, of type Event, is received by the object implementing this interface, usually a Window, an HTMLBodyElement, or an HTMLIFrameElement. Such an event is sent by the browser to inform that the preferred languages list has been updated. The list is accessible via NavigatorLanguage.languages."
    ],
    [
      "API/WorkerGlobalScope/onlanguagechange",
      "WorkerGlobalScope.onlanguagechange",
      "The onlanguagechange property of the WorkerGlobalScope interface represents an EventHandler to be called when the languagechange event occurs and bubbles through the Worker."
    ]
  ],
  "handler-workerglobalscope-onoffline": [
    [
      "API/WorkerGlobalScope/onoffline",
      "WorkerGlobalScope.onoffline",
      "The onoffline property of the WorkerGlobalScope interface represents an EventHandler to be called when the offline event occurs and bubbles through the Worker."
    ]
  ],
  "handler-workerglobalscope-ononline": [
    [
      "API/WorkerGlobalScope/ononline",
      "WorkerGlobalScope.ononline",
      "The ononline property of the WorkerGlobalScope interface represents an EventHandler to be called when the online event occurs and bubbles through the Worker."
    ]
  ],
  "hashchangeevent": [
    [
      "API/HashChangeEvent",
      "HashChangeEvent",
      "The HashChangeEvent event is fired when the fragment identifier of the URL has changed (the part of the URL that follows the # symbol, including the # symbol)."
    ]
  ],
  "hidden-state-(type=hidden)": [
    [
      "HTML/Element/input/hidden",
      "<input type=\"hidden\">",
      "<input> elements of type \"hidden\" let web developers include data that cannot be seen or modified by users when a form is submitted. For example, the ID of the content that is currently being ordered or edited, or a unique security token. Hidden inputs are completely invisible in the rendered page, and there is no way to make it visible in the page's content."
    ]
  ],
  "hiddenCSS": [
    [
      "HTML/Global_attributes/hidden",
      "hidden",
      "The hidden global attribute is a Boolean attribute indicating that the element is not yet, or is no longer, relevant. For example, it can be used to hide elements of the page that can't be used until the login process has been completed."
    ]
  ],
  "history": [
    [
      "API/History_API",
      "Manipulating the browser history",
      "The DOM window object provides access to the browser's history through the history object. It exposes useful methods and properties that let you move back and forth through the user's history, as well as -- starting with HTML5 -- manipulate the contents of the history stack."
    ]
  ],
  "htmlanchorelement": [
    [
      "API/HTMLAnchorElement",
      "HTMLAnchorElement",
      "The HTMLAnchorElement interface represents hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements."
    ]
  ],
  "htmlareaelement": [
    [
      "API/HTMLAreaElement",
      "HTMLAreaElement",
      "The HTMLAreaElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of area elements."
    ]
  ],
  "htmlaudioelement": [
    [
      "API/HTMLAudioElement",
      "HTMLAudioElement",
      "The HTMLAudioElement interface provides access to the properties of <audio> elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface."
    ]
  ],
  "htmlbaseelement": [
    [
      "API/HTMLBaseElement",
      "HTMLBaseElement",
      "The HTMLBaseElement interface contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface."
    ]
  ],
  "htmlbodyelement": [
    [
      "API/HTMLBodyElement",
      "HTMLBodyElement",
      "The HTMLBodyElement interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating body elements."
    ]
  ],
  "htmlbrelement": [
    [
      "API/HTMLBRElement",
      "HTMLBRElement",
      "The HTMLBRElement interface represents a HTML line break element (<br>). It inherits from HTMLElement."
    ]
  ],
  "htmlbuttonelement-htmlbuttonelement": [
    [
      "API/HTMLButtonElement",
      "HTMLButtonElement",
      "The HTMLButtonElement interface provides properties and methods (beyond the <button> object interface it also has available to them by inheritance) for manipulating the layout and presentation of button elements."
    ]
  ],
  "htmlcanvaselement": [
    [
      "API/HTMLCanvasElement",
      "HTMLCanvasElement",
      "The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of canvas elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface."
    ]
  ],
  "htmldataelement": [
    [
      "API/HTMLDataElement",
      "HTMLDataElement",
      "The HTMLDataElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <data> elements."
    ]
  ],
  "htmldatalistelement": [
    [
      "API/HTMLDataListElement",
      "HTMLDataListElement",
      "The HTMLDataListElement interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate <datalist> elements and their content."
    ]
  ],
  "htmldialogelement": [
    [
      "API/HTMLDialogElement",
      "HTMLDialogElement",
      "The HTMLDialogElement interface provides methods to manipulate <dialog> elements. It inherits properties and methods from the HTMLElement interface."
    ]
  ],
  "htmldivelement": [
    [
      "API/HTMLDivElement",
      "HTMLDivElement",
      "The HTMLDivElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating div elements."
    ]
  ],
  "htmldlistelement": [
    [
      "API/HTMLDListElement",
      "HTMLDListElement",
      "The HTMLDListElement interface provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list elements."
    ]
  ],
  "htmldocument": [
    [
      "API/HTMLDocument",
      "HTMLDocument",
      "HTMLDocument is an abstract interface which extends the Document interface to add HTML-specific features to the document object. It represents the root of the HTML document, within which its entire DOM hierarchy resides."
    ]
  ],
  "htmlelement": [
    [
      "API/HTMLElement",
      "HTMLElement",
      "The HTMLElement interface represents any HTML element. Some elements directly implement this interface, others implement it via an interface that inherits it."
    ]
  ],
  "htmlembedelement": [
    [
      "API/HTMLEmbedElement",
      "HTMLEmbedElement",
      "The HTMLEmbedElement interface, which provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <embed> elements."
    ]
  ],
  "htmlfieldsetelement": [
    [
      "API/HTMLFieldSetElement",
      "HTMLFieldSetElement",
      "The HTMLFieldSetElement interface has special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of field-set elements."
    ]
  ],
  "htmlformcontrolscollection": [
    [
      "API/HTMLFormControlsCollection",
      "HTMLFormControlsCollection",
      "The HTMLFormControlsCollection interface represents a collection of HTML form control elements."
    ]
  ],
  "htmlformelement": [
    [
      "API/HTMLFormElement",
      "HTMLFormElement",
      "The HTMLFormElement interface represents a <form> element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements."
    ]
  ],
  "htmlframesetelement": [
    [
      "API/HTMLFrameSetElement",
      "HTMLFrameSetElement",
      "The HTMLFrameSetElement interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating <frameset> elements."
    ]
  ],
  "htmlheadelement": [
    [
      "API/HTMLHeadElement",
      "HTMLHeadElement",
      "The HTMLHeadElement interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface."
    ]
  ],
  "htmlheadingelement": [
    [
      "API/HTMLHeadingElement",
      "HTMLHeadingElement",
      "The HTMLHeadingElement interface represents the different heading elements. It inherits methods and properties from the HTMLElement interface."
    ]
  ],
  "htmlhrelement": [
    [
      "API/HTMLHRElement",
      "HTMLHRElement",
      "The HTMLHRElement interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements."
    ]
  ],
  "htmlhtmlelement": [
    [
      "API/HTMLHtmlElement",
      "HTMLHtmlElement",
      "The HTMLHtmlElement interface serves as the root node for a given HTML document.  This object inherits the properties and methods described in the HTMLElement interface."
    ]
  ],
  "htmlhyperlinkelementutils": [
    [
      "API/HTMLHyperlinkElementUtils",
      "HTMLHyperlinkElementUtils",
      "The HTMLHyperlinkElementUtils mixin defines utility methods and properties to work with HTMLAnchorElement and HTMLAreaElement. These utilities allow to deal with common features like URLs."
    ],
    [
      "API/HTMLHyperlinkElementUtils/toString",
      "HTMLHyperlinkElementUtils.toString()",
      "The HTMLHyperlinkElementUtils.toString() stringifier method returns a USVString containing the whole URL. It is a read-only version of HTMLHyperlinkElementUtils.href."
    ]
  ],
  "htmliframeelement": [
    [
      "API/HTMLIFrameElement",
      "HTMLIFrameElement",
      "The HTMLIFrameElement interface provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements."
    ]
  ],
  "htmlimageelement": [
    [
      "API/HTMLImageElement",
      "HTMLImageElement",
      "The HTMLImageElement interface provides special properties and methods  for manipulating the layout and presentation of <img> elements."
    ]
  ],
  "htmlinputelement": [
    [
      "API/HTMLInputElement",
      "HTMLInputElement",
      "The HTMLInputElement interface provides special properties and methods for manipulating the layout and presentation of input elements."
    ]
  ],
  "htmllabelelement": [
    [
      "API/HTMLLabelElement",
      "HTMLLabelElement",
      "The HTMLLabelElement interface gives access to properties specific to <label> elements. It inherits methods and properties from the base HTMLElement interface."
    ]
  ],
  "htmllegendelement": [
    [
      "API/HTMLLegendElement",
      "HTMLLegendElement",
      "The HTMLLegendElement is an interface allowing to access properties of the <legend> elements. It inherits properties and methods from the HTMLElement interface."
    ]
  ],
  "htmllielement": [
    [
      "API/HTMLLIElement",
      "HTMLLIElement",
      "The HTMLLIElement interface exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements."
    ]
  ],
  "htmllinkelement": [
    [
      "API/HTMLLinkElement",
      "HTMLLinkElement",
      "The HTMLLinkElement interface represents reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the HTMLElement interface."
    ]
  ],
  "htmlmapelement": [
    [
      "API/HTMLMapElement",
      "HTMLMapElement",
      "The HTMLMapElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements."
    ]
  ],
  "htmlmarqueeelement": [
    [
      "API/HTMLMarqueeElement",
      "HTMLMarqueeElement",
      "The HTMLMarqueeElement interface provides methods to manipulate <marquee> elements."
    ]
  ],
  "htmlmediaelement": [
    [
      "API/HTMLMediaElement",
      "HTMLMediaElement",
      "The HTMLMediaElement interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video."
    ]
  ],
  "htmlmetaelement": [
    [
      "API/HTMLMetaElement",
      "HTMLMetaElement",
      "The HTMLMetaElement interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface."
    ]
  ],
  "htmlmeterelement": [
    [
      "API/HTMLMeterElement",
      "HTMLMeterElement",
      "The HTML <meter> elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <meter> elements."
    ]
  ],
  "htmlmodelement": [
    [
      "API/HTMLModElement",
      "HTMLModElement",
      "The HTMLModElement interface provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is <del> and <ins>."
    ]
  ],
  "htmlobjectelement": [
    [
      "API/HTMLObjectElement",
      "HTMLObjectElement",
      "The HTMLObjectElement interface provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <object> element, representing external resources."
    ]
  ],
  "htmlolistelement": [
    [
      "API/HTMLOListElement",
      "HTMLOListElement",
      "The HTMLOListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements."
    ]
  ],
  "htmloptgroupelement": [
    [
      "API/HTMLOptGroupElement",
      "HTMLOptGroupElement",
      "The HTMLOptGroupElement interface provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <optgroup> elements."
    ]
  ],
  "htmloptionelement": [
    [
      "API/HTMLOptionElement",
      "HTMLOptionElement",
      "The HTMLOptionElement interface represents <option> elements and inherits all classes and methods of the HTMLElement interface."
    ]
  ],
  "htmloutputelement": [
    [
      "API/HTMLOutputElement",
      "HTMLOutputElement",
      "The HTMLOutputElement interface provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of <output> elements."
    ]
  ],
  "htmlparagraphelement": [
    [
      "API/HTMLParagraphElement",
      "HTMLParagraphElement",
      "The HTMLParagraphElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <p> elements."
    ]
  ],
  "htmlparamelement": [
    [
      "API/HTMLParamElement",
      "HTMLParamElement",
      "The HTMLParamElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <param> elements, representing a pair of a key and a value that acts as a parameter for an <object> element."
    ]
  ],
  "htmlpictureelement": [
    [
      "API/HTMLPictureElement",
      "HTMLPictureElement",
      "The HTMLPictureElement interface represents a <picture> HTML element. It doesn't implement specific properties or methods."
    ]
  ],
  "htmlpreelement": [
    [
      "API/HTMLPreElement",
      "HTMLPreElement",
      "The HTMLPreElement interface expose specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating block of preformatted text."
    ]
  ],
  "htmlprogresselement": [
    [
      "API/HTMLProgressElement",
      "HTMLProgressElement",
      "The HTMLProgressElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <progress> elements."
    ]
  ],
  "htmlquoteelement": [
    [
      "API/HTMLQuoteElement",
      "HTMLQuoteElement",
      "The HTMLQuoteElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like <blockquote> and <q>, but not the <cite> element."
    ]
  ],
  "htmlscriptelement": [
    [
      "API/HTMLScriptElement",
      "HTMLScriptElement",
      "HTML <script> elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of <script> elements (beyond the inherited HTMLElement interface)."
    ]
  ],
  "htmlselectelement": [
    [
      "API/HTMLSelectElement",
      "HTMLSelectElement",
      "The HTMLSelectElement interface represents a <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface."
    ]
  ],
  "htmlslotelement": [
    [
      "API/HTMLSlotElement",
      "HTMLSlotElement",
      "The HTMLSlotElement interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML <slot> element."
    ]
  ],
  "htmlsourceelement": [
    [
      "API/HTMLSourceElement",
      "HTMLSourceElement",
      "The HTMLSourceElement interface provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating <source> elements."
    ]
  ],
  "htmlspanelement": [
    [
      "API/HTMLSpanElement",
      "HTMLSpanElement",
      "The HTMLSpanElement interface represents a <span> element and derives from the HTMLElement interface, but without implementing any additional properties or methods."
    ]
  ],
  "htmlstyleelement": [
    [
      "API/HTMLStyleElement",
      "HTMLStyleElement",
      "The HTMLStyleElement interface represents a <style> element. It inherits properties and methods from its parent, HTMLElement, and from LinkStyle."
    ]
  ],
  "htmltablecaptionelement": [
    [
      "API/HTMLTableCaptionElement",
      "HTMLTableCaptionElement",
      "The HTMLTableCaptionElement interface special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements."
    ]
  ],
  "htmltablecellelement": [
    [
      "API/HTMLTableCellElement",
      "HTMLTableCellElement",
      "The HTMLTableCellElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document."
    ]
  ],
  "htmltablecolelement": [
    [
      "API/HTMLTableColElement",
      "HTMLTableColElement",
      "The HTMLTableColElement interface provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements."
    ]
  ],
  "htmltableelement": [
    [
      "API/HTMLTableElement",
      "HTMLTableElement",
      "The HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document."
    ]
  ],
  "htmltablerowelement": [
    [
      "API/HTMLTableRowElement",
      "HTMLTableRowElement",
      "The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table."
    ]
  ],
  "htmltablesectionelement": [
    [
      "API/HTMLTableSectionElement",
      "HTMLTableSectionElement",
      "The HTMLTableSectionElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table."
    ]
  ],
  "htmltemplateelement": [
    [
      "API/HTMLTemplateElement",
      "HTMLTemplateElement",
      "The HTMLTemplateElement interface enables access to the contents of an HTML <template> element."
    ]
  ],
  "htmltextareaelement": [
    [
      "API/HTMLTextAreaElement",
      "HTMLTextAreaElement",
      "The HTMLTextAreaElement interface provides special properties and methods for manipulating the layout and presentation of <textarea> elements."
    ]
  ],
  "htmltimeelement": [
    [
      "API/HTMLTimeElement",
      "HTMLTimeElement",
      "The HTMLTimeElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <time> elements."
    ]
  ],
  "htmltitleelement": [
    [
      "API/HTMLTitleElement",
      "HTMLTitleElement",
      "The HTMLTitleElement interface contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface."
    ]
  ],
  "htmltrackelement": [
    [
      "API/HTMLTrackElement",
      "HTMLTrackElement",
      "The HTMLTrackElement"
    ]
  ],
  "htmlulistelement": [
    [
      "API/HTMLUListElement",
      "HTMLUListElement",
      "The HTMLUListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements."
    ]
  ],
  "htmlunknownelement": [
    [
      "API/HTMLUnknownElement",
      "HTMLUnknownElement",
      "The HTMLUnknownElement interface represents an invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods."
    ]
  ],
  "htmlvideoelement": [
    [
      "API/HTMLVideoElement",
      "HTMLVideoElement",
      "The HTMLVideoElement interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement."
    ]
  ],
  "image-button-state-(type=image)": [
    [
      "HTML/Element/input/image",
      "<input type=\"image\">",
      "<input> elements of type \"image\" are used to create graphical submit buttons, i.e. submit buttons that take the form of an image rather than text."
    ]
  ],
  "imagebitmap": [
    [
      "API/ImageBitmap",
      "ImageBitmap",
      "The ImageBitmap interface represents a bitmap image which can be drawn to a <canvas> without undue latency. It can be created from a variety of source objects using the createImageBitmap() factory method. ImageBitmap provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL."
    ]
  ],
  "imagedata": [
    [
      "API/ImageData",
      "ImageData",
      "The ImageData interface represents the underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData()."
    ]
  ],
  "imagesmoothingquality": [
    [
      "API/CanvasRenderingContext2D/imageSmoothingQuality",
      "CanvasRenderingContext2D.imageSmoothingQuality",
      "The CanvasRenderingContext2D.imageSmoothingQuality property of the Canvas 2D API allows you to set the quality of image smoothing."
    ]
  ],
  "isindex-0": [
    [
      "API/HTMLIsIndexElement",
      "HTMLIsIndexElement",
      "The HTMLIsIndexElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <isindex> elements."
    ]
  ],
  "ix-handler-ondrag": [
    [
      "API/GlobalEventHandlers/ondrag",
      "GlobalEventHandlers.ondrag",
      "A global event handler for the drag event."
    ]
  ],
  "ix-handler-ondragend": [
    [
      "API/GlobalEventHandlers/ondragend",
      "GlobalEventHandlers.ondragend",
      "A global event handler for the dragend event."
    ]
  ],
  "ix-handler-ondragenter": [
    [
      "API/GlobalEventHandlers/ondragenter",
      "GlobalEventHandlers.ondragenter",
      "A global event handler for the dragenter event."
    ]
  ],
  "ix-handler-ondragexit": [
    [
      "API/GlobalEventHandlers/ondragexit",
      "GlobalEventHandlers.ondragexit",
      "The GlobalEventHandler.ondragexit property is an event handler for the dragexit event."
    ]
  ],
  "ix-handler-ondragleave": [
    [
      "API/GlobalEventHandlers/ondragleave",
      "GlobalEventHandlers.ondragleave",
      "A global event handler for the dragleave event."
    ]
  ],
  "ix-handler-ondragover": [
    [
      "API/GlobalEventHandlers/ondragover",
      "GlobalEventHandlers.ondragover",
      "A global event handler for the dragover event."
    ]
  ],
  "ix-handler-ondragstart": [
    [
      "API/GlobalEventHandlers/ondragstart",
      "GlobalEventHandlers.ondragstart",
      "A global event handler for the dragstart event."
    ]
  ],
  "ix-handler-ondrop": [
    [
      "API/GlobalEventHandlers/ondrop",
      "GlobalEventHandlers.ondrop",
      "A global event handler for the drop event."
    ]
  ],
  "ix-handler-oninput": [
    [
      "API/GlobalEventHandlers/oninput",
      "GlobalEventHandlers.oninput",
      "An event handler for the input event on the window. The input event is raised when an <input> element value changes."
    ]
  ],
  "linkTypes": [
    [
      "HTML/Link_types",
      "Link types",
      "In HTML, link types indicate the relationship between two documents, in which one links to the other using an <a>, <area>, or <link> element."
    ]
  ],
  "local-date-and-time-state-(type=datetime-local)": [
    [
      "HTML/Element/input/datetime-local",
      "<input type=\"datetime-local\">",
      "<input> elements of type datetime-local create input controls that let the user easily enter both a date and a time, including the year, month, and day as well as the time in hours and minutes. The user's local time zone is used."
    ]
  ],
  "making-entire-documents-editable:-the-designmode-idl-attribute": [
    [
      "API/Document/designMode",
      "Document.designMode",
      "document.designMode controls whether the entire document is editable. Valid values are \"on\" and \"off\". According to the specification, this property is meant to default to \"off\". Firefox follows this standard. The earlier versions of Chrome and IE default to \"inherit\". Starting in Chrome 43, the default is \"off\" and \"inherit\" is no longer supported. In IE6-10, the value is capitalized."
    ]
  ],
  "media-elements": [
    [
      "API/HTMLMediaElement/buffered",
      "HTMLMediaElement.buffered",
      "The HTMLMediaElement.buffered read-only property returns a new TimeRanges object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the buffered property is accessed."
    ]
  ],
  "mediaerror": [
    [
      "API/MediaError",
      "MediaError",
      "The MediaError interface represents an error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as <audio> or <video>."
    ]
  ],
  "message-channels": [
    [
      "API/MessageChannel",
      "MessageChannel",
      "The MessageChannel interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties."
    ]
  ],
  "message-ports": [
    [
      "API/MessagePort",
      "MessagePort",
      "The MessagePort interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other."
    ]
  ],
  "messageevent": [
    [
      "API/MessageEvent",
      "MessageEvent",
      "The MessageEvent interface represents a message received by a target object."
    ]
  ],
  "mimetype": [
    [
      "API/MimeType",
      "MimeType",
      "The MimeType interface provides contains information about a MIME type associated with a particular plugin. NavigatorPlugins.mimeTypes returns an array of this object."
    ]
  ],
  "mimetypearray": [
    [
      "API/MimeTypeArray",
      "MimeTypeArray",
      "The MimeTypeArray interface returns an array of MimeType instances, each of which contains information about a supported browser plugins. This object is returned by NavigatorPlugins.mimeTypes."
    ]
  ],
  "month-state-(type=month)": [
    [
      "HTML/Element/input/month",
      "<input type=\"month\">",
      "<input> elements of type month create input fields that let the user enter a month and year allowing a month and year to be easily entered. The value is a string whose value is in the format \"YYYY-MM\", where YYYY is the four-digit year and MM is the month number."
    ]
  ],
  "names:-the-itemprop-attribute": [
    [
      "HTML/Global_attributes/itemprop",
      "itemprop",
      "The itemprop global attribute is used to add properties to an item. Every HTML element can have an itemprop attribute specified, and an itemprop consists of a name-value pair. Each name-value pair is called a property, and a group of one or more properties forms an item. Property values are either a string or a URL and can be associated with a very wide range of elements including <audio>, <embed>, <iframe>, <img>, <link>, <object>, <source> , <track>, and <video>."
    ]
  ],
  "navigatorconcurrenthardware": [
    [
      "API/NavigatorConcurrentHardware",
      "NavigatorConcurrentHardware",
      "The NavigatorConcurrentHardware mixin adds to the Navigator interface features which allow Web content to determine how many logical processors the user has available, in order to let content and Web apps optimize their operations to best take advantage of the user's CPU."
    ]
  ],
  "navigatorid": [
    [
      "API/NavigatorID",
      "NavigatorID",
      "The NavigatorID interface contains methods and properties related to the identity of the browser."
    ]
  ],
  "navigatorlanguage": [
    [
      "API/NavigatorLanguage",
      "NavigatorLanguage",
      "NavigatorLanguage contains methods and properties related to the language of the navigator."
    ]
  ],
  "navigatoronline": [
    [
      "API/NavigatorOnLine",
      "NavigatorOnLine",
      "The NavigatorOnLine interface contains methods and properties related to the connectivity status of the browser."
    ]
  ],
  "navigatorplugins": [
    [
      "API/NavigatorPlugins",
      "NavigatorPlugins",
      "The NavigatorPlugins mixin adds to the Navigator interface methods and properties for discovering and interacting with plugins installed into the browser."
    ]
  ],
  "noembed": [
    [
      "HTML/Element/noembed",
      "<noembed>",
      "The <noembed> element is an obsolete, non-standard way to provide alternative, or \"fallback\", content for browsers that do not support the <embed> element or do not support the type of embedded content an author wishes to use."
    ]
  ],
  "number-state-(type=number)": [
    [
      "HTML/Element/input/number",
      "<input type=\"number\">",
      "<input> elements of type \"number\" are used to let the user enter a number. They include built-in validation to reject non-numerical entries."
    ]
  ],
  "password-state-(type=password)": [
    [
      "HTML/Element/input/password",
      "<input type=\"password\">",
      "<input> elements of type \"password\" provide a way for the user to securely enter a password."
    ]
  ],
  "pluginarray": [
    [
      "API/PluginArray",
      "PluginArray",
      "The PluginArray interface is used to store a list of Plugin objects describing the available plugins; it's returned by the window.navigator.plugins property. The PluginArray is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index) and namedItem(\"name\") methods."
    ]
  ],
  "printing": [
    [
      "API/Window/print",
      "Window.print()",
      "Opens the Print Dialog to print the current document."
    ]
  ],
  "promiserejectionevent": [
    [
      "API/PromiseRejectionEvent",
      "PromiseRejectionEvent",
      "The PromiseRejectionEvent interface represents events which are fired when JavaScript Promises are rejected. These events are particularly useful for telemetry and debugging purposes."
    ]
  ],
  "pseudo-classes": [
    [
      "CSS/Pseudo-classes",
      "Pseudo-classes",
      "A CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s). For example, :hover can be used to change a button's color when the user hovers over it."
    ]
  ],
  "radio-button-state-(type=radio)": [
    [
      "HTML/Element/input/radio",
      "<input type=\"radio\">",
      "<input> elements of type radio are generally used in radio groups—collections of radio buttons describing a set of related options."
    ]
  ],
  "radionodelist": [
    [
      "API/RadioNodeList",
      "RadioNodeList",
      "The RadioNodeList interface represents a collection of elements in a <form> or a <fieldset> element."
    ]
  ],
  "range-state-(type=range)": [
    [
      "HTML/Element/input/range",
      "<input type=\"range\">",
      "<input> elements of type \"range\" let the user specify a numeric value which must be no less than a given value, and no more than another given value. The precise value, however, is not considered important. This is typically represented using a slider or dial control rather than a text entry box like the \"number\" input type."
    ]
  ],
  "relaxing-the-same-origin-restriction": [
    [
      "API/Document/domain",
      "Document.domain",
      "The domain property of the Document interface gets/sets the domain portion of the origin of the current document, as used by the same origin policy."
    ]
  ],
  "renderingcontext": [
    [
      "API/RenderingContext",
      "RenderingContext",
      "RenderingContext is a WebIDL typedef which can refer to any one of the interfaces that represent a graphics rendering context within a <canvas> element: CanvasRenderingContext2D, WebGLRenderingContext, or WebGL2RenderingContext. By using the shorthand RenderingContext, methods and properties which can make use of any of these interfaces can be specified and written more easily; since <canvas> supports several rendering systems, it's helpful from a specification and browser implementation perspective to have a shorthand that means \"one of these interfaces.\""
    ]
  ],
  "reset-button-state-(type=reset)": [
    [
      "HTML/Element/input/reset",
      "<input type=\"reset\">",
      "<input> elements of type \"reset\"  are rendered as buttons, with a default click event handler that resets all of the inputs in the form to their initial values."
    ]
  ],
  "selector-active": [
    [
      "CSS/:active",
      ":active",
      "The :active CSS pseudo-class represents an element (such as a button) that is being activated by the user."
    ]
  ],
  "selector-checked": [
    [
      "CSS/:checked",
      ":checked",
      "The :checked CSS pseudo-class selector represents any radio (<input type=\"radio\">), checkbox (<input type=\"checkbox\">), or option (<option> in a <select>) element that is checked or toggled to an on state."
    ]
  ],
  "selector-default": [
    [
      "CSS/:default",
      ":default",
      "The :default CSS pseudo-class represents any form element that is the default among a group of related elements."
    ]
  ],
  "selector-defined": [
    [
      "CSS/:defined",
      ":defined",
      "The :defined CSS pseudo-class represents any element that has been defined. This includes any standard element built in to the browser, and custom elements that have been successfully defined (i.e. with the CustomElementRegistry.define() method)."
    ]
  ],
  "selector-disabled": [
    [
      "CSS/:disabled",
      ":disabled",
      "The :disabled CSS pseudo-class represents any disabled element. An element is disabled if it can't be activated (selected, clicked on, typed into, etc.) or accept focus. The element also has an enabled state, in which it can be activated or accept focus."
    ]
  ],
  "selector-enabled": [
    [
      "CSS/:enabled",
      ":enabled",
      "The :enabled CSS pseudo-class represents any enabled element. An element is enabled if it can be activated (selected, clicked on, typed into, etc.) or accept focus. The element also has a disabled state, in which it can't be activated or accept focus."
    ]
  ],
  "selector-focus": [
    [
      "CSS/:focus",
      ":focus",
      "The :focus CSS pseudo-class represents an element (such as a form input) that has received focus. It is generally triggered when the user clicks or taps on an element or selects it with the keyboard's \"tab\" key."
    ]
  ],
  "selector-hover": [
    [
      "CSS/:hover",
      ":hover",
      "The :hover CSS pseudo-class matches when the user interacts with an element with a pointing device, but does not necessarily activate it. It is generally triggered when the user hovers over an element with the cursor (mouse pointer)."
    ]
  ],
  "selector-in-range": [
    [
      "CSS/:in-range",
      ":in-range",
      "The :in-range CSS pseudo-class represents an <input> element whose current value is within the range limits specified by the min and max attributes."
    ]
  ],
  "selector-indeterminate": [
    [
      "CSS/:indeterminate",
      ":indeterminate",
      "The :indeterminate CSS pseudo-class represents any form element whose state is indeterminate."
    ]
  ],
  "selector-invalid": [
    [
      "CSS/:invalid",
      ":invalid",
      "The :invalid CSS pseudo-class represents any <input> or other <form> element whose contents fail to validate."
    ]
  ],
  "selector-link": [
    [
      "CSS/:link",
      ":link",
      "The :link CSS pseudo-class represents an element that has not yet been visited. It matches every unvisited <a>, <area>, or <link> element that has an href attribute."
    ]
  ],
  "selector-ltr": [
    [
      "CSS/:dir",
      ":dir()",
      "The :dir() CSS pseudo-class matches elements based on the directionality of the text contained in them."
    ]
  ],
  "selector-optional": [
    [
      "CSS/:optional",
      ":optional",
      "The :optional CSS pseudo-class represents any <input>, <select>, or <textarea> element that does not have the required attribute set on it."
    ]
  ],
  "selector-out-of-range": [
    [
      "CSS/:out-of-range",
      ":out-of-range",
      "The :out-of-range CSS pseudo-class represents an <input> element whose current value is outside the range limits specified by the min and max attributes."
    ]
  ],
  "selector-read-only": [
    [
      "CSS/:read-only",
      ":read-only",
      "The :read-only CSS pseudo-class represents an element (such as a locked text input) that is not editable by the user."
    ]
  ],
  "selector-read-write": [
    [
      "CSS/:read-write",
      ":read-write",
      "The :read-write CSS pseudo-class represents an element (such as a text input) that is editable by the user."
    ]
  ],
  "selector-required": [
    [
      "CSS/:required",
      ":required",
      "The :required CSS pseudo-class represents any <input>, <select>, or <textarea> element that has the required attribute set on it."
    ]
  ],
  "selector-target": [
    [
      "CSS/:target",
      ":target",
      "The :target CSS pseudo-class represents a unique element (the target element) with an id matching the URL's fragment."
    ]
  ],
  "selector-valid": [
    [
      "CSS/:valid",
      ":valid",
      "The :valid CSS pseudo-class represents any <input> or other <form> element whose contents validate successfully. This allows to easily make valid fields adopt an appearance that helps the user confirm that their data is formatted properly."
    ]
  ],
  "selector-visited": [
    [
      "CSS/:visited",
      ":visited",
      "The :visited CSS pseudo-class represents links that the user has already visited. For privacy reasons, the styles that can be modified using this selector are very limited."
    ]
  ],
  "server-sent-events": [
    [
      "API/Server-sent_events",
      "Server-sent events",
      "Traditionally, a web page has to send a request to the server to receive new data; that is, the page requests data from the server. With server-sent events, it's possible for a server to send new data to a web page at any time, by pushing messages to the web page. These incoming messages can be treated as Events + data inside the web page."
    ]
  ],
  "sharedworker": [
    [
      "API/SharedWorker",
      "SharedWorker",
      "The SharedWorker interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, SharedWorkerGlobalScope."
    ]
  ],
  "sharedworkerglobalscope": [
    [
      "API/SharedWorkerGlobalScope",
      "SharedWorkerGlobalScope",
      "The SharedWorkerGlobalScope object (the SharedWorker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See the complete list of functions available to workers."
    ]
  ],
  "spelling-and-grammar-checking": [
    [
      "HTML/Global_attributes/spellcheck",
      "spellcheck",
      "The spellcheck global attribute is an enumerated attribute defines whether the element may be checked for spelling errors."
    ]
  ],
  "submit-button-state-(type=submit)": [
    [
      "HTML/Element/input/submit",
      "<input type=\"submit\">",
      "<input> elements of type \"submit\" are rendered as buttons. When the click event occurs (typically because the user clicked the button), the user agent attempts to submit the form to the server."
    ]
  ],
  "tel-state-(type=tel)": [
    [
      "HTML/Element/input/tel",
      "<input type=\"tel\">",
      "<input> elements of type \"tel\" are used to let the user enter and edit a telephone number. Unlike <input type=\"email\"> and <input type=\"url\"> , the input value is not automatically validated to a particular format before the form can be submitted, because formats for telephone numbers vary so much around the world."
    ]
  ],
  "text-(type=text)-state-and-search-state-(type=search)": [
    [
      "HTML/Element/input/search",
      "<input type=\"search\">",
      "<input> elements of type \"search\" are text fields designed for the user to enter search queries into. These are functionally identical to text inputs, but may be styled differently by the user agent."
    ],
    [
      "HTML/Element/input/text",
      "<input type=\"text\">",
      "<input> elements of type \"text\" create basic single-line text fields."
    ]
  ],
  "textmetrics": [
    [
      "API/TextMetrics",
      "TextMetrics",
      "The TextMetrics interface represents the dimension of a text in the canvas, as created by the CanvasRenderingContext2D.measureText() method."
    ]
  ],
  "texttrackcue": [
    [
      "API/TextTrackCue",
      "TextTrackCue",
      "TextTrackCues represent a string of text that will be displayed for some duration of time on a TextTrack. This includes the start and end times that the cue will be displayed. A TextTrackCue cannot be used directly, instead one of the derived types (e.g. VTTCue) must be used."
    ]
  ],
  "the-a-element": [
    [
      "HTML/Element/a",
      "<a>",
      "The HTML <a> element (or anchor element) creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL."
    ]
  ],
  "the-abbr-element": [
    [
      "HTML/Element/abbr",
      "<abbr>",
      "The HTML Abbreviation element (<abbr>) represents an abbreviation or acronym; the optional title attribute can provide an expansion or description for the abbreviation."
    ]
  ],
  "the-accesskey-attribute": [
    [
      "HTML/Global_attributes/accesskey",
      "accesskey",
      "The accesskey global attribute provides a hint for generating a keyboard shortcut for the current element. The attribute value must consist of a single printable character (which includes accented and other characters that can be generated by the keyboard)."
    ]
  ],
  "the-address-element": [
    [
      "HTML/Element/address",
      "<address>",
      "The HTML <address> element indicates that the enclosed HTML provides contact information for a person or people, or for an organization."
    ]
  ],
  "the-area-element": [
    [
      "HTML/Element/area",
      "<area>",
      "The HTML <area> element defines a hot-spot region on an image, and optionally associates it with a hypertext link. This element is used only within a <map> element."
    ]
  ],
  "the-article-element": [
    [
      "HTML/Element/article",
      "<article>",
      "The HTML <article> element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry."
    ]
  ],
  "the-aside-element": [
    [
      "HTML/Element/aside",
      "<aside>",
      "The HTML <aside> element represents a portion of a document whose content is only indirectly related to the document's main content."
    ]
  ],
  "the-audio-element": [
    [
      "HTML/Element/audio",
      "<audio>",
      "The HTML <audio> element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the <source> element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream."
    ]
  ],
  "the-b-element": [
    [
      "HTML/Element/b",
      "<b>",
      "The HTML Bring Attention To element (<b>)  is used to draw the reader's attention to the element's contents, which are not otherwise granted special importance."
    ]
  ],
  "the-base-element": [
    [
      "HTML/Element/base",
      "<base>",
      "The HTML <base> element specifies the base URL to use for all relative URLs contained within a document. There can be only one <base> element in a document."
    ]
  ],
  "the-bdi-element": [
    [
      "HTML/Element/bdi",
      "<bdi>",
      "The HTML Bidirectional Isolate element (<bdi>)  tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text."
    ]
  ],
  "the-bdo-element": [
    [
      "HTML/Element/bdo",
      "<bdo>",
      "The HTML Bidirectional Text Override element (<bdo>) overrides the current directionality of text, so that the text within is rendered in a different direction."
    ]
  ],
  "the-blockquote-element": [
    [
      "HTML/Element/blockquote",
      "<blockquote>",
      "The HTML <blockquote> Element (or HTML Block Quotation Element) indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see Notes for how to change it). A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the <cite> element."
    ]
  ],
  "the-body-element": [
    [
      "HTML/Element/body",
      "<body>",
      "The HTML <body> Element represents the content of an HTML document. There can be only one <body> element in a document."
    ]
  ],
  "the-br-element": [
    [
      "HTML/Element/br",
      "<br>",
      "The HTML <br> element produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant."
    ]
  ],
  "the-button-element": [
    [
      "HTML/Element/button",
      "<button>",
      "The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality."
    ]
  ],
  "the-canvas-element": [
    [
      "HTML/Element/canvas",
      "<canvas>",
      "Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations."
    ]
  ],
  "the-caption-element": [
    [
      "HTML/Element/caption",
      "<caption>",
      "The HTML Table Caption element (<caption>) specifies the caption (or title) of a table, and if used is always the first child of a <table>."
    ]
  ],
  "the-cite-element": [
    [
      "HTML/Element/cite",
      "<cite>",
      "The HTML Citation element (<cite>) is used to describe a reference to a cited creative work, and must include either the title or author or the URL of that work."
    ]
  ],
  "the-code-element": [
    [
      "HTML/Element/code",
      "<code>",
      "The HTML <code> element displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code."
    ]
  ],
  "the-col-element": [
    [
      "HTML/Element/col",
      "<col>",
      "The HTML <col> element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a <colgroup> element."
    ]
  ],
  "the-colgroup-element": [
    [
      "HTML/Element/colgroup",
      "<colgroup>",
      "The HTML <colgroup> element defines a group of columns within a table."
    ]
  ],
  "the-constraint-validation-api": [
    [
      "API/ValidityState",
      "ValidityState",
      "The ValidityState interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid."
    ]
  ],
  "the-data-element": [
    [
      "HTML/Element/data",
      "<data>",
      "The HTML <data> element links a given content with a machine-readable translation. If the content is time- or date-related, the <time> element must be used."
    ]
  ],
  "the-datalist-element": [
    [
      "HTML/Element/datalist",
      "<datalist>",
      "The HTML <datalist> element contains a set of <option> elements that represent the values available for other controls."
    ]
  ],
  "the-datatransferitemlist-interface": [
    [
      "API/DataTransferItemList/DataTransferItem",
      "DataTransferItemList.DataTransferItem()",
      "The DataTransferItem() getter method implements support for accessing items in the DataTransferItemList using array-style syntax (that is DataTransferItem[index])."
    ]
  ],
  "the-dd-element": [
    [
      "HTML/Element/dd",
      "<dd>",
      "The HTML <dd> element provides the details about or the definition of the preceding term (<dt>) in a description list (<dl>)."
    ]
  ],
  "the-del-element": [
    [
      "HTML/Element/del",
      "<del>",
      "The HTML <del> element represents a range of text that has been deleted from a document."
    ]
  ],
  "the-details-element": [
    [
      "HTML/Element/details",
      "<details>",
      "The HTML Details Element (<details>) creates a disclosure widget in which information is visible only when the widget is toggled into an \"open\" state."
    ]
  ],
  "the-dfn-element": [
    [
      "HTML/Element/dfn",
      "<dfn>",
      "The HTML Definition element (<dfn>) is used to indicate the term being defined within the context of a definition phrase or sentence."
    ]
  ],
  "the-dialog-element": [
    [
      "HTML/Element/dialog",
      "<dialog>",
      "The HTML <dialog> element represents a dialog box or other interactive component, such as an inspector or window."
    ]
  ],
  "the-dir-attribute": [
    [
      "HTML/Global_attributes/dir",
      "dir",
      "The dir global attribute is an enumerated attribute indicates the directionality of the element's text."
    ]
  ],
  "the-div-element": [
    [
      "HTML/Element/div",
      "<div>",
      "The HTML Content Division element (<div>) is the generic container for flow content. It has no effect on the content or layout until styled using CSS."
    ]
  ],
  "the-dl-element": [
    [
      "HTML/Element/dl",
      "<dl>",
      "The HTML <dl> element represents a description list. The element encloses a list of groups of terms (specified using the <dt> element) and descriptions (provided by <dd> elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs)."
    ]
  ],
  "the-document-object": [
    [
      "API/Document",
      "Document",
      "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.HTMLElement"
    ]
  ],
  "the-domstringlist-interface": [
    [
      "API/DOMStringList",
      "DOMStringList",
      "A type returned by some APIs which contains a list of DOMString (strings)."
    ]
  ],
  "the-dragevent-interface": [
    [
      "API/DragEvent/DragEvent",
      "DragEvent()",
      "This constructor is used to create a synthetic DragEvent object."
    ]
  ],
  "the-draggable-attribute": [
    [
      "HTML/Global_attributes/draggable",
      "draggable",
      "The draggable global attribute is an enumerated attribute that indicates whether the element can be dragged, using the HTML Drag and Drop API."
    ]
  ],
  "the-dt-element": [
    [
      "HTML/Element/dt",
      "<dt>",
      "The HTML <dt> element specifies a term in a description or definition list, and as such must be used inside a <dl> element."
    ]
  ],
  "the-em-element": [
    [
      "HTML/Element/em",
      "<em>",
      "The HTML <em> element marks text that has stress emphasis. The <em> element can be nested, with each level of nesting indicating a greater degree of emphasis."
    ]
  ],
  "the-embed-element": [
    [
      "HTML/Element/embed",
      "<embed>",
      "The HTML <embed> element embeds external content at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in."
    ]
  ],
  "the-errorevent-interface": [
    [
      "API/ErrorEvent",
      "ErrorEvent",
      "The ErrorEvent interface represents events providing information related to errors in scripts or in files."
    ]
  ],
  "the-eventsource-interface": [
    [
      "API/EventSource",
      "EventSource",
      "The EventSource interface is web content's interface to server-sent events. An EventSource instance opens a persistent connection to an HTTP server, which sends events in text/event-stream format."
    ]
  ],
  "the-fieldset-element": [
    [
      "HTML/Element/fieldset",
      "<fieldset>",
      "The HTML <fieldset> element is used to group several controls as well as labels (<label>) within a web form."
    ]
  ],
  "the-figcaption-element": [
    [
      "HTML/Element/figcaption",
      "<figcaption>",
      "The HTML <figcaption> element represents a caption or legend for the rest of the contents its parent <figure> element, if any."
    ]
  ],
  "the-figure-element": [
    [
      "HTML/Element/figure",
      "<figure>",
      "The HTML <figure> element represents self-contained content, frequently with a caption (<figcaption>), and is typically referenced as a single unit."
    ]
  ],
  "the-footer-element": [
    [
      "HTML/Element/footer",
      "<footer>",
      "The HTML <footer> element represents a footer for its nearest sectioning content or sectioning root element. A footer typically contains information about the author of the section, copyright data or links to related documents."
    ]
  ],
  "the-form-element": [
    [
      "HTML/Element/form",
      "<form>",
      "The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server."
    ]
  ],
  "the-h1,-h2,-h3,-h4,-h5,-and-h6-elements": [
    [
      "HTML/Element/Heading_Elements",
      "<h1>–<h6>",
      "The HTML <h1>–<h6> elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest."
    ]
  ],
  "the-head-element": [
    [
      "HTML/Element/head",
      "<head>",
      "The HTML <head> element provides general information (metadata) about the document, including its title and links to its scripts and style sheets."
    ]
  ],
  "the-header-element": [
    [
      "HTML/Element/header",
      "<header>",
      "The HTML <header> element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also other elements like a logo, a search form, an author name, and so on."
    ]
  ],
  "the-hgroup-element": [
    [
      "HTML/Element/hgroup",
      "<hgroup>",
      "The HTML <hgroup> element represents a multi-level heading for a section of a document. It groups a set of <h1>–<h6> elements."
    ]
  ],
  "the-hidden-attribute": [
    [
      "HTML/Global_attributes/hidden",
      "hidden",
      "The hidden global attribute is a Boolean attribute indicating that the element is not yet, or is no longer, relevant. For example, it can be used to hide elements of the page that can't be used until the login process has been completed."
    ]
  ],
  "the-history-interface": [
    [
      "API/History",
      "History",
      "The History interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in."
    ],
    [
      "API/Window/history",
      "Window.history",
      "The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in)."
    ]
  ],
  "the-hr-element": [
    [
      "HTML/Element/hr",
      "<hr>",
      "The HTML <hr> element represents a thematic break between paragraph-level elements (for example, a change of scene in a story, or a shift of topic with a section); historically, this has been presented as a horizontal rule or line."
    ]
  ],
  "the-html-element": [
    [
      "HTML/Element/html",
      "<html>",
      "The HTML <html> element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element."
    ]
  ],
  "the-i-element": [
    [
      "HTML/Element/i",
      "<i>",
      "The HTML <i> element represents a range of text that is set off from the normal text for some reason. Some examples include technical terms, foreign language phrases, or fictional character thoughts. It is typically displayed in italic type."
    ]
  ],
  "the-id-attribute": [
    [
      "HTML/Global_attributes/id",
      "id",
      "The id global attribute defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS)."
    ]
  ],
  "the-iframe-element": [
    [
      "HTML/Element/iframe",
      "<iframe>",
      "The HTML Inline Frame element (<iframe>) represents a nested browsing context, effectively embedding another HTML page into the current page."
    ]
  ],
  "the-img-element": [
    [
      "HTML/Element/img",
      "<img>",
      "The HTML <img> element embeds an image into the document."
    ]
  ],
  "the-innertext-idl-attribute": [
    [
      "API/Node/innerText",
      "Node.innerText",
      "Node.innerText is a property that represents the \"rendered\" text content of a node and its descendants."
    ]
  ],
  "the-input-element": [
    [
      "HTML/Element/input",
      "<input>",
      "The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent."
    ]
  ],
  "the-ins-element": [
    [
      "HTML/Element/ins",
      "<ins>",
      "The HTML <ins> element represents a range of text that has been added to a document."
    ]
  ],
  "the-kbd-element": [
    [
      "HTML/Element/kbd",
      "<kbd>",
      "The HTML Keyboard Input element (<kbd>) represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device."
    ]
  ],
  "the-label-element": [
    [
      "HTML/Element/label",
      "<label>",
      "The HTML <label> element represents a caption for an item in a user interface."
    ]
  ],
  "the-lang-and-xml:lang-attributes": [
    [
      "HTML/Global_attributes/lang",
      "lang",
      "The lang global attribute helps define the language of an element: the language that non-editable elements are written in, or the language that the editable elements should be written in by the user. The attribute contains a single “language tag” in the format defined in Tags for Identifying Languages (BCP47)."
    ]
  ],
  "the-legend-element": [
    [
      "HTML/Element/legend",
      "<legend>",
      "The HTML <legend> element represents a caption for the content of its parent <fieldset>."
    ]
  ],
  "the-li-element": [
    [
      "HTML/Element/li",
      "<li>",
      "The HTML <li> element is used to represent an item in a list. It must be contained in a parent element: an ordered list (<ol>), an unordered list (<ul>), or a menu (<menu>). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter."
    ]
  ],
  "the-link-element": [
    [
      "HTML/Element/link",
      "<link>",
      "The HTML External Resource Link element (<link>) specifies relationships between the current document and an external resource. This element is most commonly used to link to stylesheets, but is also used to establish site icons (both \"favicon\" style icons and mobile home screen/app icons) among other things."
    ]
  ],
  "the-location-interface": [
    [
      "API/Document/location",
      "Document.location",
      "The Document.location read-only property returns a Location object, which contains information about the URL of the document and provides methods for changing that URL and loading another URL."
    ],
    [
      "API/Location",
      "Location",
      "The Location interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively."
    ],
    [
      "API/Window/location",
      "Window.location",
      "The Window.location read-only property returns a Location object with information about the current location of the document."
    ]
  ],
  "the-main-element": [
    [
      "HTML/Element/main",
      "<main>",
      "The HTML <main> element represents the dominant content of the <body> of a document, portion of a document or application. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application."
    ]
  ],
  "the-map-element": [
    [
      "HTML/Element/map",
      "<map>",
      "The HTML <map> element is used with <area> elements to define an image map (a clickable link area)."
    ]
  ],
  "the-mark-element": [
    [
      "HTML/Element/mark",
      "<mark>",
      "The HTML Mark Text element (<mark>) represents text which is marked or highlighted for reference or notation purposes, due to the marked passage's relevance or importance in the enclosing context."
    ]
  ],
  "the-marquee-element-2": [
    [
      "HTML/Element/marquee",
      "<marquee>",
      "The HTML <marquee> element is used to insert a scrolling area of text. You can control what happens when the text reaches the edges of its content area using its attributes."
    ]
  ],
  "the-menu-element": [
    [
      "HTML/Element/menu",
      "<menu>",
      "The HTML <menu> element represents a group of commands that a user can perform or activate. This includes both list menus, which might appear across the top of a screen, as well as context menus, such as those that might appear underneath a button after it has been clicked."
    ]
  ],
  "the-meta-element": [
    [
      "HTML/Element/meta",
      "<meta>",
      "The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>."
    ]
  ],
  "the-meter-element": [
    [
      "HTML/Element/meter",
      "<meter>",
      "The HTML <meter> element represents either a scalar value within a known range or a fractional value."
    ]
  ],
  "the-nav-element": [
    [
      "HTML/Element/nav",
      "<nav>",
      "The HTML <nav> element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes."
    ]
  ],
  "the-navigator-object": [
    [
      "API/Navigator",
      "Navigator",
      "The Navigator interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities."
    ]
  ],
  "the-noscript-element": [
    [
      "HTML/Element/noscript",
      "<noscript>",
      "The HTML <noscript> element defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser."
    ]
  ],
  "the-object-element": [
    [
      "HTML/Element/object",
      "<object>",
      "The HTML <object> element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin."
    ]
  ],
  "the-offscreencanvas-interface": [
    [
      "API/OffscreenCanvas",
      "OffscreenCanvas",
      "The OffscreenCanvas interface provides a canvas that can be rendered off screen. It is available in both the window and worker contexts."
    ]
  ],
  "the-ol-element": [
    [
      "HTML/Element/ol",
      "<ol>",
      "The HTML <ol> element represents an ordered list of items, typically rendered as a numbered list."
    ]
  ],
  "the-optgroup-element": [
    [
      "HTML/Element/optgroup",
      "<optgroup>",
      "The HTML <optgroup> element creates a grouping of options within a <select> element."
    ]
  ],
  "the-option-element": [
    [
      "HTML/Element/option",
      "<option>",
      "The HTML <option> element is used to define an item contained in a <select>, an <optgroup>, or a <datalist> element. As such, <option> can represent menu items in popups and other lists of items in an HTML document."
    ]
  ],
  "the-output-element": [
    [
      "HTML/Element/output",
      "<output>",
      "The HTML Output element (<output>) is a container element into which a site or app can inject the results of a calculation or the outcome of a user action."
    ]
  ],
  "the-p-element": [
    [
      "HTML/Element/p",
      "<p>",
      "The HTML <p> element represents a paragraph."
    ]
  ],
  "the-pagetransitionevent-interface": [
    [
      "API/PageTransitionEvent",
      "PageTransitionEvent",
      "The PageTransitionEvent is fired when a document is being loaded or unloaded."
    ]
  ],
  "the-param-element": [
    [
      "HTML/Element/param",
      "<param>",
      "The HTML <param> element defines parameters for an <object> element."
    ]
  ],
  "the-picture-element": [
    [
      "HTML/Element/picture",
      "<picture>",
      "The HTML <picture> element serves as a container for zero or more <source> elements and one <img> element to provide versions of an image for different display device scenarios."
    ]
  ],
  "the-pre-element": [
    [
      "HTML/Element/pre",
      "<pre>",
      "The HTML <pre> element represents preformatted text which is to be presented exactly as written in the HTML file."
    ]
  ],
  "the-progress-element": [
    [
      "HTML/Element/progress",
      "<progress>",
      "The HTML <progress> element displays an indicator showing the completion progress of a task, typically displayed as a progress bar."
    ]
  ],
  "the-promiserejectionevent-interface": [
    [
      "API/PromiseRejectionEvent/PromiseRejectionEvent",
      "PromiseRejectionEvent.PromiseRejectionEvent()",
      "The PromiseRejectionEvent() constructor returns a newly created PromiseRejectionEvent, which represents events fired when a JavaScript Promise is rejected. With promise rejection events, it becomes possible to detect and report promises which fail and whose failures go unnoticed. It also becomes easier to write a global handler for errors."
    ]
  ],
  "the-q-element": [
    [
      "HTML/Element/q",
      "<q>",
      "The HTML <q> element  indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks."
    ]
  ],
  "the-rp-element": [
    [
      "HTML/Element/rp",
      "<rp>",
      "The HTML Ruby Fallback Parenthesis (<rp>) element is used to provide fall-back parentheses for browsers that do not support display of ruby annotations using the <ruby> element."
    ]
  ],
  "the-rt-element": [
    [
      "HTML/Element/rt",
      "<rt>",
      "The HTML Ruby Text (<rt>) element specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The <rt> element must always be contained within a <ruby> element."
    ]
  ],
  "the-ruby-element": [
    [
      "HTML/Element/ruby",
      "<ruby>",
      "The HTML <ruby> element represents a ruby annotation. Ruby annotations are for showing pronunciation of East Asian characters."
    ]
  ],
  "the-s-element": [
    [
      "HTML/Element/s",
      "<s>",
      "The HTML <s> element renders text with a strikethrough, or a line through it. Use the <s> element to represent things that are no longer relevant or no longer accurate. However, <s> is not appropriate when indicating document edits; for that, use the <del> and <ins> elements, as appropriate."
    ]
  ],
  "the-samp-element": [
    [
      "HTML/Element/samp",
      "<samp>",
      "The HTML Sample Element (<samp>) is used to enclose inline text which represents sample (or quoted) output from a computer program."
    ]
  ],
  "the-script-element": [
    [
      "HTML/Element/script",
      "<script>",
      "The HTML <script> element is used to embed or reference executable code; this is typically used to embed or refer to JavaScript code."
    ]
  ],
  "the-section-element": [
    [
      "HTML/Element/section",
      "<section>",
      "The HTML <section> element represents a standalone section — which doesn't have a more specific semantic element to represent it — contained within an HTML document."
    ]
  ],
  "the-select-element": [
    [
      "HTML/Element/select",
      "<select>",
      "The HTML <select> element represents a control that provides a menu of options"
    ]
  ],
  "the-slot-element": [
    [
      "HTML/Element/slot",
      "<slot>",
      "The HTML <slot> element—part of the Web Components technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together."
    ]
  ],
  "the-small-element": [
    [
      "HTML/Element/small",
      "<small>",
      "The HTML <small> element makes the text font size one size smaller (for example, from large to medium, or from small to x-small) down to the browser's minimum font size.  In HTML5, this element is repurposed to represent side-comments and small print, including copyright and legal text, independent of its styled presentation."
    ]
  ],
  "the-source-element": [
    [
      "HTML/Element/source",
      "<source>",
      "The HTML <source> element specifies multiple media resources for the <picture>, the <audio> element, or the <video> element. It is an empty element. It is commonly used to serve the same media content in multiple formats supported by different browsers."
    ]
  ],
  "the-span-element": [
    [
      "HTML/Element/span",
      "<span>",
      "The HTML <span> element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang."
    ]
  ],
  "the-storage-interface": [
    [
      "API/Storage",
      "Storage",
      "The Storage interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items."
    ]
  ],
  "the-strong-element": [
    [
      "HTML/Element/strong",
      "<strong>",
      "The HTML Strong Importance Element (<strong>) indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type."
    ]
  ],
  "the-style-attribute": [
    [
      "HTML/Global_attributes/style",
      "style",
      "The style global attribute contains CSS styling declarations to be applied to the element. Note that it is recommended for styles to be defined in a separate file or files. This attribute and the <style> element have mainly the purpose of allowing for quick styling, for example for testing purposes."
    ]
  ],
  "the-style-element": [
    [
      "HTML/Element/style",
      "<style>",
      "The HTML <style> element contains style information for a document, or part of a document."
    ]
  ],
  "the-sub-and-sup-elements": [
    [
      "HTML/Element/sub",
      "<sub>",
      "The HTML Subscript element (<sub>) specifies inline text which should be displayed as subscript for solely typographical reasons."
    ],
    [
      "HTML/Element/sup",
      "<sup>",
      "The HTML Superscript element (<sup>) specifies inline text which is to be displayed as superscript for solely typographical reasons."
    ]
  ],
  "the-summary-element": [
    [
      "HTML/Element/summary",
      "<summary>",
      "The HTML Disclosure Summary element (<summary>) element specifies a summary, caption, or legend for a <details> element's disclosure box."
    ]
  ],
  "the-table-element": [
    [
      "HTML/Element/table",
      "<table>",
      "The HTML <table> element represents tabular data — that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data."
    ]
  ],
  "the-tbody-element": [
    [
      "HTML/Element/tbody",
      "<tbody>",
      "The HTML Table Body element (<tbody>) encapsulates a set of table row (<tr> elements, indicating that they comprise the body of the table (<table>)."
    ]
  ],
  "the-td-element": [
    [
      "HTML/Element/td",
      "<td>",
      "The HTML <td> element defines a cell of a table that contains data. It participates in the table model."
    ]
  ],
  "the-template-element": [
    [
      "HTML/Element/template",
      "<template>",
      "The HTML Content Template (<template>) element is a mechanism for holding client-side content that is not to be rendered when a page is loaded but may subsequently be instantiated during runtime using JavaScript."
    ]
  ],
  "the-textarea-element": [
    [
      "HTML/Element/textarea",
      "<textarea>",
      "The HTML <textarea> element represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example a comment on a review or feedback form."
    ]
  ],
  "the-tfoot-element": [
    [
      "HTML/Element/tfoot",
      "<tfoot>",
      "The HTML <tfoot> element defines a set of rows summarizing the columns of the table."
    ]
  ],
  "the-th-element": [
    [
      "HTML/Element/th",
      "<th>",
      "The HTML <th> element defines a cell as header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes."
    ]
  ],
  "the-thead-element": [
    [
      "HTML/Element/thead",
      "<thead>",
      "The HTML <thead> element defines a set of rows defining the head of the columns of the table."
    ]
  ],
  "the-time-element": [
    [
      "HTML/Element/time",
      "<time>",
      "The HTML <time> element represents a specific period in time. It may include the datetime attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders."
    ]
  ],
  "the-title-attribute": [
    [
      "HTML/Global_attributes/title",
      "title",
      "The title global attribute contains text representing advisory information, related to the element it belongs to."
    ]
  ],
  "the-title-element": [
    [
      "HTML/Element/title",
      "<title>",
      "The HTML Title element (<title>) defines the document's title that is shown in a browser's title bar or a page's tab."
    ]
  ],
  "the-tr-element": [
    [
      "HTML/Element/tr",
      "<tr>",
      "The HTML <tr> element defines a row of cells in a table. The row's cells can then be established using a mix of <td> (data cell) and <th> (header cell) elements.The HTML <tr> element specifies that the markup contained inside the <tr> block comprises one row of a table, inside which the <th> and <td> elements create header and data cells, respectively, within the row."
    ]
  ],
  "the-track-element": [
    [
      "HTML/Element/track",
      "<track>",
      "The HTML <track> element is used as a child of the media elements <audio> and <video>. It lets you specify timed text tracks (or time-based data), for example to automatically handle subtitles. The tracks are formatted in WebVTT format (.vtt files) — Web Video Text Tracks or Timed Text Markup Language (TTML)."
    ]
  ],
  "the-u-element": [
    [
      "HTML/Element/u",
      "<u>",
      "The HTML Unarticulated Annotation element (<u>) represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation."
    ]
  ],
  "the-ul-element": [
    [
      "HTML/Element/ul",
      "<ul>",
      "The HTML <ul> element represents an unordered list of items, typically rendered as a bulleted list."
    ]
  ],
  "the-var-element": [
    [
      "HTML/Element/var",
      "<var>",
      "The HTML Variable element (<var>) represents the name of a variable in a mathematical expression or a programming context."
    ]
  ],
  "the-video-element": [
    [
      "HTML/Element/video",
      "<video>",
      "The HTML Video element (<video>) embeds a media player which supports video playback into the document."
    ]
  ],
  "the-wbr-element": [
    [
      "HTML/Element/wbr",
      "<wbr>",
      "The HTML <wbr> element represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location."
    ]
  ],
  "the-websocket-interface": [
    [
      "API/WebSocket",
      "WebSocket",
      "The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection."
    ]
  ],
  "time-ranges": [
    [
      "API/TimeRanges",
      "TimeRanges",
      "The TimeRanges interface is used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the <audio> and <video> elements."
    ]
  ],
  "time-state-(type=time)": [
    [
      "HTML/Element/input/time",
      "<input type=\"time\">",
      "<input> elements of type time create input fields designed to let the user easily enter a time (hours and minutes, and optionally seconds)."
    ]
  ],
  "transferable-objects": [
    [
      "API/Transferable",
      "Transferable",
      "The Transferable interface represents an object that can be transfered between different execution contexts, like the main thread and Web workers."
    ]
  ],
  "tt": [
    [
      "HTML/Element/tt",
      "<tt>",
      "The obsolete HTML Teletype Text element (<tt>) creates inline text which is presented using the user agent's default monospace font face."
    ]
  ],
  "url-state-(type=url)": [
    [
      "HTML/Element/input/url",
      "<input type=\"url\">",
      "<input> elements of type \"url\" are used to let the user enter and edit a URL. The input value is automatically validated to ensure that it's either empty or a properly-formatted URL before the form can be submitted."
    ]
  ],
  "videotrack": [
    [
      "API/VideoTrack",
      "VideoTrack",
      "The VideoTrack interface represents a single video track from a <video> element."
    ]
  ],
  "videotracklist": [
    [
      "API/VideoTrackList",
      "VideoTrackList",
      "The VideoTrackList interface is used to represent a list of the video tracks contained within a <video> element, with each track represented by a separate VideoTrack object in the list."
    ]
  ],
  "webstorage": [
    [
      "API/Web_Storage_API",
      "Web Storage API",
      "The Web Storage API provides mechanisms by which browsers can store key/value pairs, in a much more intuitive fashion than using cookies."
    ],
    [
      "API/Web_Storage_API/Using_the_Web_Storage_API",
      "Using the Web Storage API",
      "The Web Storage API provides mechanisms by which browsers can securely store key/value pairs, in a much more intuitive fashion than using cookies."
    ]
  ],
  "week-state-(type=week)": [
    [
      "HTML/Element/input/week",
      "<input type=\"week\">",
      "<input> elements of type \"week\" create input fields allowing easy entry of a year plus the ISO 8601 week number during that year (i.e., week 1 to 52 or 53)."
    ]
  ],
  "windoweventhandlers": [
    [
      "API/WindowEventHandlers",
      "WindowEventHandlers",
      "The WindowEventHandlers mixin describes the event handlers common to several interfaces like Window, or HTMLBodyElement and  HTMLFrameSetElement. Each of these interfaces can implement additional specific event handlers."
    ]
  ],
  "windoworworkerglobalscope-mixin": [
    [
      "API/WindowOrWorkerGlobalScope",
      "WindowOrWorkerGlobalScope",
      "The WindowOrWorkerGlobalScope mixin describes several features common to the Window and WorkerGlobalScope interfaces."
    ]
  ],
  "worker": [
    [
      "API/Worker",
      "Worker",
      "The Worker interface of the Web Workers API represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread."
    ]
  ],
  "workerglobalscope": [
    [
      "API/WorkerGlobalScope",
      "WorkerGlobalScope",
      "The WorkerGlobalScope interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects — in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop."
    ]
  ],
  "workerlocation": [
    [
      "API/WorkerLocation",
      "WorkerLocation",
      "The WorkerLocation interface defines the absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling self.location."
    ]
  ],
  "workernavigator": [
    [
      "API/WorkerNavigator",
      "WorkerNavigator",
      "The WorkerNavigator interface represents a subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.navigator property obtained by calling window.self.navigator."
    ]
  ],
  "workers": [
    [
      "API/Web_Workers_API",
      "Web Workers API",
      "Web Workers makes it possible to run a script operation in a background thread separate from the main execution thread of a web application. The advantage of this is that laborious processing can be performed in a separate thread, allowing the main (usually the UI) thread to run without being blocked/slowed down."
    ],
    [
      "API/Web_Workers_API/Using_web_workers",
      "Using Web Workers",
      "Web Workers is a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface. In addition, they can perform I/O using XMLHttpRequest (although the responseXML and channel attributes are always null). Once created, a worker can send messages to the JavaScript code that created it by posting messages to an event handler specified by that code (and vice versa)."
    ]
  ]
}
